{"version":3,"sources":["utils/index.js","vendors/firebase/firebase.js","vendors/firebase/firebase.firestore.js","MonthlyCalendar/AddNewTradeBtn.js","MonthlyCalendar/AddNewTradeFormModal.js","MonthlyCalendar/AddNewTradeSuccessAlert.js","MonthlyCalendar/DailyTradesModal.js","MonthlyCalendar/DeleteTradeSuccessAlert.js","MonthlyCalendar/EditTradeFormModal.js","MonthlyCalendar/DayLabels.js","MonthlyCalendar/Day.js","MonthlyCalendar/DaysGrid.js","MonthlyCalendar/MonthCalendarGrid.js","MonthlyCalendar/MonthlyStats.js","MonthlyCalendar/MonthNavigator.js","MonthlyCalendar/TradeLogDeleteConfirmModal.js","MonthlyCalendar/UpdateTradeSuccessAlert.js","MonthlyCalendar/MonthlyCalendar.js","App.js","index.js"],"names":["getTotalProfitFromTrades","trades","length","totalProfit","map","trade","tradeType","openingPrice","parseFloat","toFixed","closingPrice","numberOfShares","parseInt","console","log","reduce","eachTradeProfit","getUserFromLocalStorage","userStringified","localStorage","getItem","JSON","parse","getMonthFromDate","date","Error","monthIndex","getMonth","getDateFromDate","getDate","getYearFromDate","getFullYear","getPrevMonthFromDate","Date","x","setDate","setMonth","getNextMonthFromDate","findMatchingTradesByDate","month","year","Array","isArray","filter","getUniqueId","uniqid","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","stringify","json","jsonify","stringified","e","getTradeLogsDocById","docId","a","getDoc","doc","fetchAllTradesByUserId","userId","userTradeLogsDoc","exists","info","userTrades","data","content","createNewTradeLog","newTrade","validateNewTrade","isValid","error","missingProperty","find","property","hasOwnProperty","userTradeLogsRef","userTradeLogsSnap","existingData","newData","newDataStringified","updateDoc","isNewTradeLogCreated","message","setDoc","deleteTradeLog","tradeLogId","filteredTrades","tradeId","isTradeLogDeleted","deletedTradeLogId","updateTradeLog","updatedTradeLog","updatedTrade","updatedTrades","isTradeLogUpdated","updatedTradeLogId","AddNewTradeBtn","props","onClick","class","viewBox","fill","d","AddNewTradeFormModal","state","ticker","stopLoss","takeProfit","notes","vwap","onFormSubmit","bind","onInputChange","preventDefault","target","name","value","this","setState","trim","toUpperCase","toLowerCase","newTradeLog","activeDateDate","activeMonth","activeYear","onCreateNewTradeLog","onClose","newTradeLogError","className","role","onSubmit","id","for","onChange","type","placeholder","required","min","step","checked","rows","Component","AddNewTradeSuccessAlert","isOpen","self","setTimeout","alertDurationInSeconds","xmlns","DailyTradesModal","activeTradeLogs","onOpenAddNewTradeForm","onEditTradeLog","onDeleteTradeLog","activeDateTradeLogs","activeTradeLog","profit","isProfitNegative","includes","organization","DeleteTradeSuccessAlert","EditTradeFormModal","tradeToEdit","onUpdateNewTradeLog","editTradeLogError","DayLabels","Day","isVoidDay","isActiveDay","onSelectDay","tickers","join","getTickersFromTrades","numberOfTrades","isTotalProfitNegative","DaysGrid","activeDate","todayDate","numberOfDaysInMonth","firstOfMonth","indexOfFirstDayInMonth","getDay","numberOfDaysInGrid","daysInGrid","keys","_","index","dayGrid","matchingTrades","MonthlyCalendarGrid","MonthlyStats","gains","losses","MonthNavigator","prevMonth","nextMonth","onClickOnPrevMonth","onClickOnNextMonth","TradeLogDeleteConfirmModal","tradeToDelete","onConfirmDeleteTrade","stroke","UpdateTradeSuccessAlert","MonthlyCalendar","firstOfPrevMonth","firstOfNextMonth","showDailyTradesModal","showAddNewTradeFormModal","showAddNewTradeSuccessAlert","showEditTradeFormModal","showUpdateTradeSuccessAlert","showDeleteTradeSuccessAlert","showTradeLogDeleteConfirmModal","deleteTradeLogError","setShowDailyTradesModal","setShowAddNewTradeFormModal","setShowAddNewTradeSuccessAlert","setShowEditTradeFormModal","setShowUpdateTradeSuccessAlert","setShowTradeLogDeleteConfirmModal","setShowDeleteTradeSuccessAlert","status","user","uid","isNewTradeCreated","refetchAllTrades","allTradeLogs","toString","filterTradesByMonthAndYear","stats","getStatsFromTrades","App","fetchAllTrades","fetchedTradeLogs","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.705212db.chunk.js","sourcesContent":["import uniqid from 'uniqid';\n\nexport const getStatsFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return {\n    gains: '0.00',\n    losses: '0.00',\n    profit: '0.00',\n  };\n  const stats = trades\n    // extract each trade properties to calculate total profit\n    .map(trade => ({ \n      tradeType: trade.tradeType, \n      openingPrice: parseFloat(trade.openingPrice).toFixed(2),\n      closingPrice: parseFloat(trade.closingPrice).toFixed(2),\n      numberOfShares: parseInt(trade.numberOfShares),\n    }))\n    // calculate each trade profit by trade type\n    .map((trade) => {\n      // on short trade, opening price > closing price\n      if (trade.tradeType === 'short') {\n        return (trade.openingPrice - trade.closingPrice) * trade.numberOfShares;\n      }\n      // on long trade, closing price > opening price\n      return (trade.closingPrice - trade.openingPrice) * trade.numberOfShares;\n    }) \n    // adds up all the trade profits together\n    .reduce((stats, eachTradeProfit) => {\n      if (eachTradeProfit > 0) {\n        stats.gains = stats.gains + eachTradeProfit;\n      }\n      if (eachTradeProfit < 0) {\n        stats.losses = stats.losses + eachTradeProfit;\n      }\n      stats.profit = stats.profit + eachTradeProfit;\n      return stats;\n    }, {\n      gains: 0.00,\n      losses: 0.00,\n      profit: 0.00,\n    });\n  return {\n    gains: parseFloat(stats.gains).toFixed(2),\n    losses: parseFloat(stats.losses).toFixed(2),\n    profit: parseFloat(stats.profit).toFixed(2),\n  }\n}\n\nexport const getTotalProfitFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return '0.00';\n  const totalProfit = trades\n    // extract each trade properties to calculate total profit\n    .map(trade => ({ \n      tradeType: trade.tradeType, \n      openingPrice: parseFloat(trade.openingPrice).toFixed(2),\n      closingPrice: parseFloat(trade.closingPrice).toFixed(2),\n      numberOfShares: parseInt(trade.numberOfShares),\n    }))\n    // calculate each trade profit by trade type\n    .map((trade) => {\n      console.log({ trade });\n      // on short trade, opening price > closing price\n      if (trade.tradeType === 'short') {\n        return (trade.openingPrice - trade.closingPrice) * trade.numberOfShares;\n      }\n      // on long trade, closing price > opening price\n      return (trade.closingPrice - trade.openingPrice) * trade.numberOfShares;\n    }) \n    // adds up all the trade profits together\n    .reduce((totalProfit, eachTradeProfit) => {\n      console.log({ eachTradeProfit });\n      return totalProfit + eachTradeProfit;\n    }, 0);\n  console.log({ totalProfit });\n  return parseFloat(totalProfit).toFixed(2);\n}\n\nexport const getTickersFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return '';\n  return trades\n    .map(trade => trade.ticker)\n    .join(', ');\n}\n\nexport const getUserFromLocalStorage = () => {\n  const userStringified = localStorage.getItem('logtrade:::user');\n  if (userStringified === null) return null;\n  return JSON.parse(userStringified);\n}\n\nexport const getMonthFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n\n  const MONTHS_FULL= [\n    \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n    \"August\",\"September\",\"October\",\"November\",\"December\"\n  ];\n\n  const monthIndex = date.getMonth();\n\n  if (monthIndex < 0 || monthIndex > 11) {\n    throw new Error(\n      'Invalid month detected, check to ensure valid date is passed'\n    );\n  }\n\n  return MONTHS_FULL[monthIndex];\n}\n\nexport const getDateFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  return date.getDate();\n}\n\nexport const getYearFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  return date.getFullYear();\n}\n\nexport const getDayFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  const DAYS = [\n    'Sunday', 'Monday', 'Tuesday', 'Wednesday', \n    'Thursday', 'Friday', 'Saturday'\n  ];\n\n  const dayIndex = date.getDay();\n\n  if (dayIndex < 0 || dayIndex > 6) {\n    throw new Error(\n      'Invalid day detected, check to ensure valid date is passed'\n    );\n  }\n\n  return DAYS[dayIndex];\n}\n\nexport const getNumberOfDaysInMonth = (month, year) => {\n  return new Date(year, month + 1, 0).getDate();\n};\n\n/**\n * Given a date, returns date of previous month. Note: the default date \n * if previous month is set to 1 by default\n * @param {Date} date - a Date object\n * @returns {Date} - a Date object\n */\nexport const getPrevMonthFromDate = (date) => {\n  if (!date || !(date instanceof Date)) {\n    throw new Error(\n      'Please pass in a `Date` object to generate previous month'\n    );\n  }\n  const x = new Date(date);\n  x.setDate(1);\n  x.setMonth(x.getMonth() - 1);\n  return x;\n}\n\n/**\n * Given a date, returns date of next month. Note: the default date \n * if previous month is set to 1 by default\n * @param {Date} date - a Date object\n * @returns {Date} - a Date object\n */\n export const getNextMonthFromDate = (date) => {\n  if (!date || !(date instanceof Date)) {\n    throw new Error('Please pass in a `Date` object to generate next month');\n  }\n  const x = new Date(date);\n  x.setDate(1);\n  x.setMonth(x.getMonth() + 1);\n  return x;\n}\n\nexport const addMinutesToDate = (date = new Date(), minutesToAdd = 0) => {  \n  const currentDate = new Date();\n  const futureDate = new Date(currentDate.getTime() + (minutesToAdd * 60000));\n  return futureDate.getTime();\n}\n\nexport const filterTradesByMonthAndYear = (trades = [], month, year) => {\n  return trades.filter(trade => trade.month === month && trade.year === year);\n}\n\nexport const findMatchingTradesByDate = (trades = [], month, date, year) => {\n  if (!trades.length || !Array.isArray(trades)) return;\n  return trades.filter(trade => (\n    (trade.month === month) && \n    (trade.date === date) &&\n    (trade.year === year)\n  ));\n}\n\nexport const getUniqueId = () => uniqid('logtrade-');\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArgNoY7luYCUYJlVAxapXEjw2nuDu5Ny8\",\n  authDomain: \"log-trade-dev.firebaseapp.com\",\n  projectId: \"log-trade-dev\",\n  storageBucket: \"log-trade-dev.appspot.com\",\n  messagingSenderId: \"427284527632\",\n  appId: \"1:427284527632:web:9232621b47da1f73dca895\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);","import './firebase';\nimport { getFirestore, doc, getDoc, setDoc, updateDoc, arrayUnion } from \"firebase/firestore\"\n// import { getDocFromCache, saveDocInCache } from \"./firebase.cache\";\n\nconst db = getFirestore();\n\n// const fakeDB = {\n//   trades: [\n//     {\n//       closingPrice: \"11.50\",\n//       date: \"1\",\n//       month: \"October\",\n//       name: \"Cellect Biotechnology\",\n//       notes: \"Awesome win today!\",\n//       numberOfShares: 2,\n//       openingPrice: \"10.50\",\n//       stopLoss: \"9.00\",\n//       takeProfit: \"12.00\",\n//       ticker: \"APOPA\",\n//       tradeType: \"long\",\n//       year: \"2021\",\n//       tradeId: 'xwtr34535',\n//     },\n//     {\n//       closingPrice: \"15.00\",\n//       date: \"2\",\n//       month: \"October\",\n//       name: \"Atlantic American\",\n//       notes: \"Nice!\",\n//       numberOfShares: 3,\n//       openingPrice: \"10.00\",\n//       stopLoss: \"9.00\",\n//       takeProfit: \"20.00\",\n//       ticker: \"AAME\",\n//       year: \"2021\",\n//       tradeId: '74t6e657',\n//     },\n//     {\n//       closingPrice: \"43543543.00\",\n//       date: \"8\",\n//       month: \"October\",\n//       name: \"Aeglea Biotherapeutics\",\n//       notes: \"3453455\",\n//       numberOfShares: 3,\n//       openingPrice: \"4353.00\",\n//       stopLoss: \"54543.00\",\n//       takeProfit: \"4534.00\",\n//       ticker: \"AGLE\",\n//       year: \"2021\",\n//       tradeId: 'xn73i434x',\n//     },\n//     {\n//       closingPrice: \"15.00\",\n//       date: \"2\",\n//       month: \"October\",\n//       name: \"Tesla\",\n//       notes: \"Cool!\",\n//       numberOfShares: 10,\n//       openingPrice: \"17.00\",\n//       stopLoss: \"7.00\",\n//       takeProfit: \"18.00\",\n//       ticker: \"TSLA\",\n//       year: \"2021\",\n//       tradeId: 'x4w56wx54',\n//     }\n//   ],\n//   userId: '51XeDcMHQzYfB3clHKZZnnp87uq2',\n// }\n\n// export const fetchAllTradesByUserId = async (userId) => {\n//   if (!userId || typeof userId !== 'string') {\n//     throw new Error('Please pass in a user id to get stocks');\n//   }\n\n//   // fake API data\n//   const userTrades = {\n//     exists: () => true,\n//     data: () => (fakeDB)\n//   };\n\n//   // const userTrades = await getDoc(doc(db, \"tradelogs\", userId));\n\n//   if (userTrades?.exists()) {\n//     return userTrades?.data()?.trades;\n//   } \n//   return [];\n// } \n\n// export const createNewTradeLog = async (newTrade, userId) => {\n//   const tradelogRef = doc(db, \"tradelogs\", userId)\n//   const tradelogSnap = await getDoc(tradelogRef) ;\n\n//   if (tradelogSnap.exists()) {\n//     // update existing document by adding new trade to trades list\n//     try {\n//       await updateDoc(tradelogRef, {\n//         trades: arrayUnion({ ...newTrade }),\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   } else {\n//     // set up a new document and add new trade to trades list\n//     try {\n//       await setDoc(doc(db, \"tradelogs\", userId), {\n//         trades: [{ ...newTrade }],\n//         userId,\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   }\n// }\n\n// tradelogs stringified\n\nexport const stringify = json => {\n  const isJSONObject = typeof json === 'object' && json !== null;\n  if (!isJSONObject) {\n    throw new Error('Please pass in a valid JSON object to stringify');\n  }\n  return JSON.stringify(json);\n}\n\nexport const jsonify = stringified => {\n  if (!stringified \n    || !stringified.length \n    || typeof stringified !== 'string'\n  ) {\n    throw new Error('Please pass in a valid stringified JSON to parse');\n  }\n  try {\n    const jsonified = JSON.parse(stringified);\n    return jsonified;\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\n// const getUserDoc = async (\n//   userId, \n//   options = { \n//     useCache: false, \n//     cacheDurationInMinutes: 1,\n//   },\n// ) => {\n//   // flags\n//   const useCache = options.useCache || false;\n//   const cacheDurationInMinutes = options.cacheDurationInMinutes || 1;\n\n//   console.log({ ...options });\n//   if (!userId || typeof userId !== 'string') {\n//     throw new Error('Please pass in a user id to get document');\n//   }\n\n//   const getUserDocFromFirestore = async (userId) => {\n//     const userDoc = await getDoc(doc(db, \"tradelogs-stringified\", userId));\n//     return { \n//       exists: userDoc?.exists(),\n//       data: userDoc?.data(),\n//     };\n//   }\n\n//   const getUserDocFromCache = async (userId) => {\n//     const { exists, data, expiration } = await getDocFromCache(userId);\n//     return { \n//       exists, \n//       data, \n//       expiration \n//     }; \n//   }\n\n//   if (!useCache) {\n//     console.log(\n//       `useCache [${useCache}]... getting user doc from firebase DB`\n//     );\n//     const { exists, data } = await getUserDocFromFirestore(userId); \n//     if (exists) {\n//       saveDocInCache(\n//         userId, \n//         stringify(data), \n//         cacheDurationInMinutes\n//       );\n//     }\n//     return { exists, data };\n//   }\n  \n//   if (useCache) {\n//     const { exists, data, expiration } = await getUserDocFromCache(userId);\n//     const isCacheExpired = expiration !== null && new Date().getTime() > expiration;\n\n//     console.log({ exists, data, expiration, isCacheExpired, currentTime: new Date().getTime() });\n\n//     if (!exists || isCacheExpired) {\n//       console.log(\n//         `useCache [${useCache}], but cache either doesn't have doc OR is expired... getting user doc from firebase DB`\n//       );\n//       const { exists, data } = await getUserDocFromFirestore(userId); \n//       if (exists) {\n//         saveDocInCache(\n//           userId, \n//           stringify(data), \n//           cacheDurationInMinutes\n//         );\n//       }\n//       return { exists, data };\n//     }\n\n//     console.log(\n//       `useCache [${useCache}]... getting user doc from cache`\n//     );\n//     return { exists, data };\n//   }\n// }\n\n// export const fetchAllTradesByUserId = async (\n//   userId, \n//   options = { useCache: true, cacheDurationInMinutes: 0.15 },\n// ) => {\n//   if (!userId || typeof userId !== 'string') {\n//     throw new Error('Please pass in a user id to get stocks');\n//   }\n\n//   // fake API data\n//   // const userTrades = {\n//   //   exists: () => true,\n//   //   data: () => (fakeDB)\n//   // };\n\n//   const { exists, data } = await getUserDoc(userId, options);\n\n//   if (!exists) {\n//     console.info(`No document found for user [${userId}]`);\n//     return [];\n//   };\n\n//   // const data = userDoc?.data();\n//   console.log({ data });\n//   // saveDocInCache(userId, data);\n//   const content = jsonify(data?.content || '');\n//   const trades = content?.trades;\n//   console.log({ trades });\n//   return trades;\n\n//   // check cache for existing doc\n//   // const userDocCache = getDocFromCache(userId);\n//   // if cache, serve from there\n//   // if (userDocCache !== null) {\n//   //   console.log('serving user doc from cache...');\n//   //   const content = jsonify(userDocCache.content || '');\n//   //   const trades = content?.trades;\n//   //   console.log({ trades });\n//   //   return trades;\n//   // } else {\n//   //   console.log('serving user doc from DB...');\n//   //   // else get from DB\n//   //   // save fetched doc from DB in cache for later ref\n//   //   const userDoc = await getDoc(doc(db, \"tradelogs-stringified\", userId));\n\n//   //   if (!userDoc?.exists()) return [];\n\n//   //   const data = userDoc?.data();\n//   //   saveDocInCache(userId, data);\n//   //   const content = jsonify(data?.content || '');\n//   //   const trades = content?.trades;\n//   //   console.log({ trades });\n//   //   return trades;\n//   // }\n// } \n\n// export const createNewTradeLog = async (newTrade, userId) => {\n//   const tradelogRef = doc(db, \"tradelogs-stringified\", userId)\n//   const tradelogSnap = await getDoc(tradelogRef) ;\n\n//   if (tradelogSnap.exists()) {\n//     // update existing document by adding new trade to trades list\n//     try {\n//       await updateDoc(tradelogRef, {\n//         trades: arrayUnion({ ...newTrade }),\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   } else {\n//     // set up a new document and add new trade to trades list\n//     try {\n//       await setDoc(doc(db, \"tradelogs\", userId), {\n//         trades: [{ ...newTrade }],\n//         userId,\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   }\n// }\n\nconst getTradeLogsDocById = async (docId) => {\n  if (!docId || typeof docId !== 'string') {\n    throw new Error(\n      'Please pass in a valid doc id to fetch document from Firestore'\n    );\n  }\n  return await getDoc(doc(db, \"tradelogs-stringified\", docId));\n}\n\nexport const fetchAllTradesByUserId = async (userId) => {\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to get trade logs');\n  }\n\n  const userTradeLogsDoc = await getTradeLogsDocById(userId);\n\n  if (!userTradeLogsDoc?.exists()) {\n    console.info(\n      `No trade logs found for user id - [${userId}]. Returning empty array set`\n    );\n    return [];\n  } \n\n  const userTrades = \n    jsonify(userTradeLogsDoc?.data()?.content || {}).trades || [];\n\n  console.log({ userTrades });\n\n  return userTrades;\n} \n\nexport const createNewTradeLog = async (newTrade, userId) => {\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to create a new trade log');\n  }\n\n  const validateNewTrade = (newTrade) => {\n    if (!newTrade || typeof newTrade !== 'object') {\n      return { \n        isValid: false, \n        error: 'Please pass in a valid new trade object', \n      }\n    }\n    const requiredProperties = [\n      'tradeId',\n      'openingPrice',\n      'closingPrice',\n      'stopLoss',\n      'takeProfit',\n      'date',\n      'month',\n      'year',\n      'notes',\n      'numberOfShares',\n      'ticker',\n      'vwap'\n    ]\n    const missingProperty = requiredProperties.find(property => {\n      return !newTrade.hasOwnProperty(property)\n    });\n\n    if (missingProperty) {\n      return { \n        isValid: false, \n        error: `[${missingProperty}] property is required to create a new trade` \n      }\n    }\n    return { isValid: true, error: null };\n  }\n\n  const { isValid, error } = validateNewTrade(newTrade);\n\n  if (!isValid) {\n    return { error };\n  }\n\n  const userTradeLogsRef = doc(db, \"tradelogs-stringified\", userId)\n  const userTradeLogsSnap = await getDoc(userTradeLogsRef) ;\n\n  if (userTradeLogsSnap.exists()) {\n    // update existing document by adding new trade to trades list\n    const { content } = userTradeLogsSnap.data() || {};\n    const existingData = jsonify(content);\n    const { userId, trades = [] } = existingData;\n    const newData = {\n      trades: [\n        ...trades,\n        { ...newTrade },\n      ],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await updateDoc(userTradeLogsRef, {\n        content: newDataStringified,\n      });\n      return { isNewTradeLogCreated: true };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to create new trade at the moment. Try again later.' \n      }\n    }\n  } else {\n    // set up a new document and add new trade to trades list\n    const newData = {\n      trades: [{ ...newTrade }],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await setDoc(doc(db, \"tradelogs-stringified\", userId), {\n        content: newDataStringified,\n      });\n      return { isNewTradeLogCreated: true };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to create new trade at the moment. Try again later.' \n      }\n    }\n  }\n}\n\nexport const deleteTradeLog = async (tradeLogId, userId) => {\n  if (!tradeLogId || typeof tradeLogId !== 'string') {\n    throw new Error('Please pass in a valid trade log id to delete');\n  }\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to delete a trade log');\n  }\n\n  const userTradeLogsRef = doc(db, \"tradelogs-stringified\", userId)\n  const userTradeLogsSnap = await getDoc(userTradeLogsRef);\n\n  if (userTradeLogsSnap.exists()) {\n    // update existing trade logs list by removing matching trade id\n    const { content } = userTradeLogsSnap.data() || {};\n    const existingData = jsonify(content);\n    const { userId, trades = [] } = existingData;\n    const filteredTrades = trades.filter(trade => trade.tradeId !== tradeLogId);\n    const newData = {\n      trades: [...filteredTrades],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await updateDoc(userTradeLogsRef, {\n        content: newDataStringified,\n      });\n      return { isTradeLogDeleted: true, deletedTradeLogId: tradeLogId };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to delete trade log at the moment. Try again later.' \n      }\n    }\n  }\n}\n\nexport const updateTradeLog = async (tradeLogId, updatedTradeLog, userId) => {\n  if (!tradeLogId || typeof tradeLogId !== 'string') {\n    throw new Error('Please pass in a valid trade log id to delete');\n  }\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to delete a trade log');\n  }\n\n  \n  const validateNewTrade = (updatedTrade) => {\n    if (!updatedTrade || typeof updatedTrade !== 'object') {\n      return {\n        isValid: false,\n        error: 'Please pass in a valid updated trade object',\n      }\n    }\n    const requiredProperties = [\n      'tradeId',\n      'openingPrice',\n      'closingPrice',\n      'stopLoss',\n      'takeProfit',\n      'date',\n      'month',\n      'year',\n      'notes',\n      'numberOfShares',\n      'ticker',\n    ]\n    const missingProperty = requiredProperties.find(property => {\n      return !updatedTrade.hasOwnProperty(property)\n    });\n\n    if (missingProperty) {\n      return { \n        isValid: false, \n        error: `[${missingProperty}] property is required to update a trade` \n      }\n    }\n    return { isValid: true, error: null };\n  }\n\n  const { isValid, error } = validateNewTrade(updatedTradeLog);\n\n  if (!isValid) {\n    return {\n      error,\n    };\n  }\n\n  const userTradeLogsRef = doc(db, \"tradelogs-stringified\", userId)\n  const userTradeLogsSnap = await getDoc(userTradeLogsRef);\n\n  if (userTradeLogsSnap.exists()) {\n    // update existing trade logs list by removing matching trade id\n    const { content } = userTradeLogsSnap.data() || {};\n    const existingData = jsonify(content);\n    const { userId, trades = [] } = existingData;\n    const updatedTrades = trades.map((trade) => {\n      if (trade.tradeId === tradeLogId) {\n        return { ...updatedTradeLog };\n      }\n      return trade;\n    });\n    const newData = {\n      trades: [...updatedTrades],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await updateDoc(userTradeLogsRef, {\n        content: newDataStringified,\n      });\n      return { isTradeLogUpdated: true, updatedTradeLogId: tradeLogId };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to delete trade log at the moment. Try again later.' \n      }\n    }\n  }\n}\n\n\n\n\n","const AddNewTradeBtn = props => {\n  const { onClick } = props;\n  return (\n    <div class=\"AddTradeBtn fixed bottom-1 right-1 mr-2 mb-2\">\n      <button\n        class=\"text-white px-4 w-auto h-12 bg-red-600 rounded-full hover:bg-red-700 active:shadow-lg mouse shadow transition ease-in duration-200 focus:outline-none\" onClick={onClick}>\n        <svg viewBox=\"0 0 20 20\" enable-background=\"new 0 0 20 20\" class=\"w-4 h-4 inline-block mr-1\">\n        <path fill=\"#FFFFFF\" d=\"M17.561,2.439c-1.442-1.443-2.525-1.227-2.525-1.227L8.984,7.264L2.21,14.037L1.2,18.799l4.763-1.01\n                                l6.774-6.771l6.052-6.052C18.788,4.966,19.005,3.883,17.561,2.439z M5.68,17.217l-1.624,0.35c-0.156-0.293-0.345-0.586-0.69-0.932\n                                c-0.346-0.346-0.639-0.533-0.932-0.691l0.35-1.623l0.47-0.469c0,0,0.883,0.018,1.881,1.016c0.997,0.996,1.016,1.881,1.016,1.881\n                                L5.68,17.217z\"/>\n      </svg>\n        <span>Add Trade</span>\n      </button>\n    </div>\n  )\n};\n\nexport default AddNewTradeBtn;","import React, { Component } from 'react';\nimport { getUniqueId } from '../utils';\n\nclass AddNewTradeFormModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ticker: '',\n      numberOfShares: 1,\n      openingPrice: '0.00',\n      closingPrice: '0.00',\n      stopLoss: '0.00',\n      takeProfit: '0.00',\n      notes: '',\n      tradeType: 'long',\n      vwap: 'under',\n    }\n\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  onInputChange(e) {\n    e.preventDefault();\n    const { name, value } = e?.target || {};\n\n    if (name === 'ticker') {\n      this.setState({ [name]: value.trim().toUpperCase() })\n    } else if (name === 'tradeType') {\n      this.setState({ [name]: value.trim().toLowerCase() })\n    } else if (name === 'numberOfShares') {\n      this.setState({ [name]: parseInt(value) })\n    } else {\n      this.setState({ [name]: value });\n    }\n  }\n \n  onFormSubmit(e) {\n    e.preventDefault();\n    const newTradeLog = {\n      ticker: this.state.ticker,\n      numberOfShares: this.state.numberOfShares,\n      openingPrice: this.state.openingPrice,\n      closingPrice: this.state.closingPrice,\n      stopLoss: this.state.stopLoss,\n      takeProfit: this.state.takeProfit,\n      notes: this.state.notes,\n      tradeType: this.state.tradeType,\n      vwap: this.state.vwap,\n\n      date: this.props.activeDateDate,\n      month: this.props.activeMonth, \n      year: this.props.activeYear, \n\n      tradeId: getUniqueId(),\n    }\n\n    console.log({ newTradeLog });\n    this.props.onCreateNewTradeLog(newTradeLog);\n  }\n\n  render() {\n    const { activeDateDate, activeMonth, activeYear, onClose, newTradeLogError } = this.props;\n\n    return (\n      <div className=\"AddNewTradeFormModal fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\n        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n          {/* <!--\n            Background overlay, show/hide based on modal state.\n\n            Entering: \"ease-out duration-300\"\n              From: \"opacity-0\"\n              To: \"opacity-100\"\n            Leaving: \"ease-in duration-200\"\n              From: \"opacity-100\"\n              To: \"opacity-0\"\n          --> */}\n          <div \n          className={`fixed inset-0 bg-gray-500 bg-opacity-75`} aria-hidden=\"true\"></div>\n\n          {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n          <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n          {/* <!--\n            Modal panel, show/hide based on modal state.\n\n            Entering: \"ease-out duration-300\"\n              From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n              To: \"opacity-100 translate-y-0 sm:scale-100\"\n            Leaving: \"ease-in duration-200\"\n              From: \"opacity-100 translate-y-0 sm:scale-100\"\n              To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n          --> */}\n          <form onSubmit={this.onFormSubmit} className={`inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform sm:my-8 sm:align-middle sm:max-w-lg sm:w-full`}>\n            <div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n              <div className=\"w-full\">\n                <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                  {/* <div className=\"flex flex-wrap justify-between\"> */}\n                  <h3 className=\"text-2xl leading-6 font-medium text-gray-900 mb-2\" id=\"modal-title\">\n                    Add Trade\n                  </h3>\n                  <p className=\"text-sm text-gray-400\">{activeMonth} {activeDateDate}, {activeYear}</p>\n                  \n                  <div className=\"mt-2\">\n                    <div className=\"w-full my-5\">\n\n                        {newTradeLogError !== null && (\n                          <div class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n                            <strong class=\"font-bold\">Oops! </strong>\n                            <span class=\"block sm:inline\">{newTradeLogError}</span>\n                          </div>\n                        )}\n\n                  \n\n                        {/* <div class=\"flex flex-col my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"ticker\">\n                            Ticker\n                          </label>\n                          <div class=\"relative\">\n                            <select class=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-state\">\n                              <option defaultChecked>Choose a ticker</option>\n                              <option>AAPL: Apple Inc.</option>\n                              <option>GOOGL: Google Inc.</option>\n                              <option>TSLA: Tesla Inc.</option>\n                            </select>\n                            <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                              <svg class=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\"/></svg>\n                            </div>\n                          </div>\n                        </div> */}\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"Ticker\">\n                            Ticker\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            {/* <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span> */}\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.ticker} onChange={this.onInputChange} name=\"ticker\" id=\"ticker\" type=\"text\" placeholder=\"AAPL\" required />\n                          </div>\n                        </div>\n\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"number-of-shares\">\n                            Number of Shares\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            {/* <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span> */}\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.numberOfShares} onChange={this.onInputChange} name=\"numberOfShares\" id=\"number-of-shares\" type=\"number\" min=\"1\" step=\"1\" placeholder=\"2\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"closing-price\">\n                            Trade Type\n                          </label>\n                          <div class=\"mt-1 flex rounded-md\">\n\n                            <div className=\"px-2\">\n                              <label class=\"inline-flex items-center\">\n                                <input \n                                  type=\"radio\" \n                                  value=\"long\" \n                                  onChange={this.onInputChange}  \n                                  class=\"form-radio\" \n                                  name=\"tradeType\" \n                                  checked={this.state.tradeType === 'long'}\n                                />\n                                <span class=\"ml-2\">Long</span>\n                              </label>\n                            </div>\n                            <div className=\"px-2\">\n                              <label class=\"inline-flex items-center\">\n                                <input \n                                  type=\"radio\" \n                                  value=\"short\" \n                                  onChange={this.onInputChange}  \n                                  class=\"form-radio\" \n                                  name=\"tradeType\" \n                                  checked={this.state.tradeType === 'short'}\n                                />\n                                <span class=\"ml-2\">Short</span>\n                              </label>\n                            </div>\n\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"opening-price\">\n                            Opening Price\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span>\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.openingPrice} onChange={this.onInputChange} name=\"openingPrice\" id=\"opening-price\" type=\"number\" placeholder=\"10.95\" min=\"0.01\" step=\"0.01\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"closing-price\">\n                            Closing Price\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span>\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.closingPrice} onChange={this.onInputChange} name=\"closingPrice\" id=\"closing-price\" type=\"number\" placeholder=\"10.95\" min=\"0.01\" step=\"0.01\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"stop-loss\">\n                            Stop Loss\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span>\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.stopLoss} onChange={this.onInputChange} name=\"stopLoss\" id=\"stop-loss\" type=\"number\" placeholder=\"9.95\" min=\"0.01\" step=\"0.01\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"take-profit\">\n                            Take Profit\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span>\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.takeProfit} onChange={this.onInputChange} name=\"takeProfit\" id=\"take-profit\" type=\"number\" placeholder=\"15.95\" min=\"0.01\" step=\"0.01\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"closing-price\">\n                            VWAP\n                          </label>\n                          <div class=\"mt-1 flex rounded-md\">\n                            <div className=\"px-2\">\n                              <label class=\"inline-flex items-center\">\n                                <input \n                                  type=\"radio\" \n                                  value=\"under\" \n                                  onChange={this.onInputChange}  \n                                  class=\"form-radio\" \n                                  name=\"vwap\" \n                                  checked={this.state.vwap === 'under'}\n                                />\n                                <span class=\"ml-2\">Under</span>\n                              </label>\n                            </div>\n                            <div className=\"px-2\">\n                              <label class=\"inline-flex items-center\">\n                                <input \n                                  type=\"radio\" \n                                  value=\"over\" \n                                  onChange={this.onInputChange}  \n                                  class=\"form-radio\" \n                                  name=\"vwap\" \n                                  checked={this.state.vwap === 'over'}\n                                />\n                                <span class=\"ml-2\">Over</span>\n                              </label>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-col mt-5 mb-3\">\n                          <label for=\"notes\" class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\">Notes</label>\n                          <textarea id=\"notes\" value={this.state.notes} onChange={this.onInputChange} name=\"notes\" class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" rows=\"4\"></textarea>\n                        </div>\n\n                        \n                  \n                      \n                    </div>\n                  </div>\n\n                </div>\n              </div>\n            </div>\n            <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n              <button type=\"submit\" className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm\">\n                Create Trade\n              </button>\n              <button type=\"button\" className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\" onClick={onClose}>\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default AddNewTradeFormModal;","import React, { Component } from \"react\"\n\nclass AddNewTradeSuccessAlert extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: true,\n    }\n  }\n\n  componentDidMount() {\n    const self = this;\n    setTimeout(() => {\n      self.setState({ isOpen: false });\n    }, this.props.alertDurationInSeconds || 5000);\n  }\n\n  render() {\n    if (!this.state.isOpen) return null;    \n\n    return (\n      <div class=\"w-1/4 mx-auto fixed bottom-0 mb-3 mr-3\">\n        <div class=\"flex p-5 rounded-lg shadow-lg bg-white\">\n        <div>\n          <svg class=\"w-6 h-6 fill-current text-green-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4 8-8z\"/></svg>\n        </div>\n        <div class=\"ml-3\">\n          <h2 class=\"font-semibold text-gray-800\">Success!</h2>\n          <p class=\"mt-2 text-sm text-gray-600 leading-relaxed\">New trade log has been created</p>\n        </div>\n        </div>\n      </div>\n    )\n\n  }\n}\n\nexport default AddNewTradeSuccessAlert;","import { BiTrendingUp, BiTrendingDown } from 'react-icons/bi';\nimport { getTotalProfitFromTrades, findMatchingTradesByDate } from '../utils';\n\nconst DailyTradesModal = props => {\n  const { activeDateDate, activeMonth, activeYear, activeTradeLogs = [], onClose, onOpenAddNewTradeForm, onEditTradeLog, onDeleteTradeLog } = props;\n  const activeDateTradeLogs = findMatchingTradesByDate(\n    activeTradeLogs, \n    activeMonth, \n    activeDateDate, \n    activeYear,\n  );\n  console.log({ activeDateDate, activeMonth, activeYear, activeTradeLogs, activeDateTradeLogs });\n  return (\n    <div className=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\n      <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        {/* <!--\n          Background overlay, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0\"\n            To: \"opacity-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100\"\n            To: \"opacity-0\"\n        --> */}\n        <div className={`fixed inset-0 bg-gray-500 bg-opacity-75`} aria-hidden=\"true\"></div>\n\n        {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n        {/* <!--\n          Modal panel, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            To: \"opacity-100 translate-y-0 sm:scale-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100 translate-y-0 sm:scale-100\"\n            To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        --> */}\n        <div className={`inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform sm:my-8 sm:align-middle sm:max-w-lg sm:w-full`}>\n          <div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n            <div className=\"w-full\">\n              <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                {/* <div className=\"flex flex-wrap justify-between\"> */}\n                <h3 className=\"text-2xl leading-6 font-medium text-gray-900 mb-2\" id=\"modal-title\">\n                  Trade Log\n                </h3>\n                <p className=\"text-sm text-gray-400\">{activeMonth} {activeDateDate}, {activeYear}</p>\n                \n                <div className=\"mt-2\">\n                  <div className=\"w-full flex flex-wrap\">\n\n                    {!activeDateTradeLogs?.length && (\n                      <div class=\"w-full flex justify-center item-center p-3\">\n                        <p className=\"text-gray-400 italic\">No trade transaction</p>\n                      </div>\n                    )}\n\n                    {!!activeDateTradeLogs?.length && activeDateTradeLogs.map(activeTradeLog => {\n                      const profit = getTotalProfitFromTrades([{ ...activeTradeLog }]);\n                      const isProfitNegative = profit.includes('-');\n                      return (\n                        <div className=\"w-full bg-gray-100 bg-opacity-75 my-3\">\n                          <div className=\"h-full p-6 rounded-lg border-2 border-gray-300 flex flex-col\">\n                            <div className=\"flex flex-wrap justify-between\">\n                              <div className=\"flex flex-col\">\n                                <h2 className=\"text-sm tracking-widest title-font mb-1 font-medium\">{activeTradeLog.ticker}</h2>\n                                <h1 className=\"text-2xl title-font mb-1 font-medium\">{activeTradeLog.organization || 'Anonymous' }</h1>\n                              </div>\n                              <div className=\"profit\">\n                                <p className={`text-4xl font-bold ${isProfitNegative ? 'text-red-500' : 'text-green-500'} flex`}>\n                                  <span className=\"trend mr-2\"> \n                                    {isProfitNegative ? <BiTrendingDown /> : <BiTrendingUp />}\n                                  </span>  \n                                  <span className=\"value\">${profit}</span>\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex flex-wrap content-start text-center rounded bg-white border border-gray-200 mt-3 mb-3 py-2\">\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.openingPrice}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Open</p>\n                              </div>\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.closingPrice}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Close</p>\n                              </div>\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.numberOfShares}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Shares</p>\n                              </div>\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.stopLoss}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Stop Loss</p>\n                              </div>\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.takeProfit}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Take Profit</p>\n                              </div>\n                            </div>\n                            <div className=\"log-actions flex justify-center sm:justify-end\">\n                              <button className=\"lg:mt-2 xl:mt-0 btn-small text-white inline bg-yellow-500 border-0 text-xs py-2 px-4 focus:outline-none hover:bg-yellow-600 rounded\" onClick={() => onEditTradeLog(activeTradeLog)}>Edit</button>\n                              <button className=\"lg:mt-2 xl:mt-0 ml-1 text-white bg-red-500 border-0 text-xs py-2 px-4 focus:outline-none hover:bg-red-600 rounded\" onClick={() => onDeleteTradeLog(activeTradeLog)}>Delete</button>\n                            </div>\n                          </div>\n                        </div>\n                      )\n                    })}\n                    \n                  </div>\n                </div>\n\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n            <button type=\"button\" className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm\" onClick={onOpenAddNewTradeForm}>\n              New Trade?\n            </button>\n            <button type=\"button\" className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\" onClick={onClose}>\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DailyTradesModal;","import React, { Component } from \"react\"\n\nclass DeleteTradeSuccessAlert extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: true,\n    }\n  }\n\n  componentDidMount() {\n    const self = this;\n    setTimeout(() => {\n      self.setState({ isOpen: false });\n    }, this.props.alertDurationInSeconds || 5000);\n  }\n\n  render() {\n    if (!this.state.isOpen) return null;    \n\n    return (\n      <div class=\"w-1/4 mx-auto fixed bottom-0 mb-3 mr-3\">\n        <div class=\"flex p-5 rounded-lg shadow-lg bg-white\">\n        <div>\n          <svg class=\"w-6 h-6 fill-current text-green-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4 8-8z\"/></svg>\n        </div>\n        <div class=\"ml-3\">\n          <h2 class=\"font-semibold text-gray-800\">Success!</h2>\n          <p class=\"mt-2 text-sm text-gray-600 leading-relaxed\">Trade log has been deleted</p>\n        </div>\n        </div>\n      </div>\n    )\n\n  }\n}\n\nexport default DeleteTradeSuccessAlert;","import React, { Component } from 'react';\nimport { BiTrendingUp, BiTrendingDown } from 'react-icons/bi';\nimport { getTotalProfitFromTrades, getUniqueId } from '../utils';\n\nclass EditTradeFormModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ticker: '',\n      numberOfShares: 1,\n      openingPrice: '0.00',\n      closingPrice: '0.00',\n      stopLoss: '0.00',\n      takeProfit: '0.00',\n      notes: '',\n      tradeType: 'long',\n      vwap: 'under',\n    }\n\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { tradeToEdit } = this.props;\n\n    if (tradeToEdit) {\n      this.setState({\n        ticker: tradeToEdit.ticker,\n        numberOfShares: tradeToEdit.numberOfShares,\n        openingPrice: tradeToEdit.openingPrice,\n        closingPrice: tradeToEdit.closingPrice,\n        stopLoss: tradeToEdit.stopLoss,\n        takeProfit: tradeToEdit.takeProfit,\n        notes: tradeToEdit.notes,\n        tradeType: tradeToEdit.tradeType,\n        vwap: tradeToEdit.vwap,\n      });\n    }\n    \n  }\n\n  onInputChange(e) {\n    e.preventDefault();\n    const { name, value } = e?.target || {};\n\n    if (name === 'ticker') {\n      this.setState({ [name]: value.trim().toUpperCase() })\n    } else if (name === 'tradeType') {\n      this.setState({ [name]: value.trim().toLowerCase() })\n    } else if (name === 'numberOfShares') {\n      this.setState({ [name]: parseInt(value) })\n    } else {\n      this.setState({ [name]: value });\n    }\n  }\n \n  onFormSubmit(e) {\n    e.preventDefault();\n    const updatedTradeLog = {\n      ...this.props.tradeToEdit,\n\n      ticker: this.state.ticker,\n      numberOfShares: this.state.numberOfShares,\n      openingPrice: this.state.openingPrice,\n      closingPrice: this.state.closingPrice,\n      stopLoss: this.state.stopLoss,\n      takeProfit: this.state.takeProfit,\n      notes: this.state.notes,\n      tradeType: this.state.tradeType,\n      vwap: this.state.vwap,\n    }\n\n    console.log({ updatedTradeLog });\n    this.props.onUpdateNewTradeLog(updatedTradeLog);\n  }\n\n  render() {\n    const { tradeToEdit, onClose, editTradeLogError } = this.props;\n\n    if (!tradeToEdit || tradeToEdit === null) return null;\n\n    return (\n      <div className=\"EditTradeFormModal fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\n        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n          {/* <!--\n            Background overlay, show/hide based on modal state.\n\n            Entering: \"ease-out duration-300\"\n              From: \"opacity-0\"\n              To: \"opacity-100\"\n            Leaving: \"ease-in duration-200\"\n              From: \"opacity-100\"\n              To: \"opacity-0\"\n          --> */}\n          <div \n          className={`fixed inset-0 bg-gray-500 bg-opacity-75`} aria-hidden=\"true\"></div>\n\n          {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n          <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n          {/* <!--\n            Modal panel, show/hide based on modal state.\n\n            Entering: \"ease-out duration-300\"\n              From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n              To: \"opacity-100 translate-y-0 sm:scale-100\"\n            Leaving: \"ease-in duration-200\"\n              From: \"opacity-100 translate-y-0 sm:scale-100\"\n              To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n          --> */}\n          <form onSubmit={this.onFormSubmit} className={`inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform sm:my-8 sm:align-middle sm:max-w-lg sm:w-full`}>\n            <div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n              <div className=\"w-full\">\n                <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                  {/* <div className=\"flex flex-wrap justify-between\"> */}\n                  <h3 className=\"text-2xl leading-6 font-medium text-gray-900 mb-2\" id=\"modal-title\">\n                    Edit Trade\n                  </h3>\n                  <p className=\"text-sm text-gray-400\">{tradeToEdit.month} {tradeToEdit.date}, {tradeToEdit.year}</p>\n                  \n                  <div className=\"mt-2\">\n                    <div className=\"w-full my-5\">\n\n                        {editTradeLogError !== null && (\n                          <div class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n                            <strong class=\"font-bold\">Oops! </strong>\n                            <span class=\"block sm:inline\">{editTradeLogError}</span>\n                          </div>\n                        )}\n\n                  \n\n                        {/* <div class=\"flex flex-col my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"ticker\">\n                            Ticker\n                          </label>\n                          <div class=\"relative\">\n                            <select class=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-state\">\n                              <option defaultChecked>Choose a ticker</option>\n                              <option>AAPL: Apple Inc.</option>\n                              <option>GOOGL: Google Inc.</option>\n                              <option>TSLA: Tesla Inc.</option>\n                            </select>\n                            <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                              <svg class=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\"/></svg>\n                            </div>\n                          </div>\n                        </div> */}\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"Ticker\">\n                            Ticker\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            {/* <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span> */}\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.ticker} onChange={this.onInputChange} name=\"ticker\" id=\"ticker\" type=\"text\" placeholder=\"AAPL\" required />\n                          </div>\n                        </div>\n\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"number-of-shares\">\n                            Number of Shares\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            {/* <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span> */}\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.numberOfShares} onChange={this.onInputChange} name=\"numberOfShares\" id=\"number-of-shares\" type=\"number\" min=\"1\" step=\"1\" placeholder=\"2\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"closing-price\">\n                            Trade Type\n                          </label>\n                          <div class=\"mt-1 flex rounded-md\">\n\n                            <div className=\"px-2\">\n                              <label class=\"inline-flex items-center\">\n                                <input \n                                  type=\"radio\" \n                                  value=\"long\" \n                                  onChange={this.onInputChange}  \n                                  class=\"form-radio\" \n                                  name=\"tradeType\" \n                                  checked={this.state.tradeType === 'long'}\n                                />\n                                <span class=\"ml-2\">Long</span>\n                              </label>\n                            </div>\n                            <div className=\"px-2\">\n                              <label class=\"inline-flex items-center\">\n                                <input \n                                  type=\"radio\" \n                                  value=\"short\" \n                                  onChange={this.onInputChange}  \n                                  class=\"form-radio\" \n                                  name=\"tradeType\" \n                                  checked={this.state.tradeType === 'short'}\n                                />\n                                <span class=\"ml-2\">Short</span>\n                              </label>\n                            </div>\n\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"opening-price\">\n                            Opening Price\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span>\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.openingPrice} onChange={this.onInputChange} name=\"openingPrice\" id=\"opening-price\" type=\"number\" placeholder=\"10.95\" min=\"0.01\" step=\"0.01\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"closing-price\">\n                            Closing Price\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span>\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.closingPrice} onChange={this.onInputChange} name=\"closingPrice\" id=\"closing-price\" type=\"number\" placeholder=\"10.95\" min=\"0.01\" step=\"0.01\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"stop-loss\">\n                            Stop Loss\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span>\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.stopLoss} onChange={this.onInputChange} name=\"stopLoss\" id=\"stop-loss\" type=\"number\" placeholder=\"9.95\" min=\"0.01\" step=\"0.01\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"take-profit\">\n                            Take Profit\n                          </label>\n                          <div class=\"mt-1 flex rounded-md shadow-sm\">\n                            <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                              $\n                            </span>\n                            <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" value={this.state.takeProfit} onChange={this.onInputChange} name=\"takeProfit\" id=\"take-profit\" type=\"number\" placeholder=\"15.95\" min=\"0.01\" step=\"0.01\" required />\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-wrap justify-between items-center my-3\">\n                          <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"closing-price\">\n                            VWAP\n                          </label>\n                          <div class=\"mt-1 flex rounded-md\">\n                            <div className=\"px-2\">\n                              <label class=\"inline-flex items-center\">\n                                <input \n                                  type=\"radio\" \n                                  value=\"under\" \n                                  onChange={this.onInputChange}  \n                                  class=\"form-radio\" \n                                  name=\"vwap\" \n                                  checked={this.state.vwap === 'under'}\n                                />\n                                <span class=\"ml-2\">Under</span>\n                              </label>\n                            </div>\n                            <div className=\"px-2\">\n                              <label class=\"inline-flex items-center\">\n                                <input \n                                  type=\"radio\" \n                                  value=\"over\" \n                                  onChange={this.onInputChange}  \n                                  class=\"form-radio\" \n                                  name=\"vwap\" \n                                  checked={this.state.vwap === 'over'}\n                                />\n                                <span class=\"ml-2\">Over</span>\n                              </label>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div class=\"flex flex-col mt-5 mb-3\">\n                          <label for=\"notes\" class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\">Notes</label>\n                          <textarea id=\"notes\" value={this.state.notes} onChange={this.onInputChange} name=\"notes\" class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" rows=\"4\"></textarea>\n                        </div>\n\n                        \n                  \n                      \n                    </div>\n                  </div>\n\n                </div>\n              </div>\n            </div>\n            <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n              <button type=\"submit\" className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-yellow-600 text-base font-medium text-white hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 sm:ml-3 sm:w-auto sm:text-sm\">\n                Update Trade\n              </button>\n              <button type=\"button\" className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\" onClick={onClose}>\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default EditTradeFormModal;","const DayLabels = props => {\n  return (\n    <div className=\"DayLabels day-labels\">\n      <p className=\"day\">\n        <span className=\"long hidden sm:block\">Sunday</span> \n        <span className=\"long sm:hidden block\">Su</span>\n      </p>\n      <p className=\"day\">\n        <span className=\"long hidden sm:block\">Monday</span> \n        <span className=\"long sm:hidden block\">Mo</span>\n      </p>\n      <p className=\"day\">\n        <span className=\"long hidden sm:block\">Tuesday</span> \n        <span className=\"long sm:hidden block\">Tu</span>\n      </p>\n      <p className=\"day\">\n        <span className=\"long hidden sm:block\">Wednesday</span> \n        <span className=\"long sm:hidden block\">We</span>\n      </p>\n      <p className=\"day\">\n        <span className=\"long hidden sm:block\">Thursday</span> \n        <span className=\"long sm:hidden block\">Th</span>\n      </p>\n      <p className=\"day\">\n        <span className=\"long hidden sm:block\">Friday</span> \n        <span className=\"long sm:hidden block\">Fr</span>\n      </p>\n      <p className=\"day\">\n        <span className=\"long hidden sm:block\">Saturday</span> \n        <span className=\"long sm:hidden block\">Sa</span>\n      </p>\n    </div>\n  )\n}\n\nexport default DayLabels;","import { getTickersFromTrades, getTotalProfitFromTrades } from \"../utils\";\n\nconst Day = props => {\n  // console.log({ props });\n  const { \n    isVoidDay, month, date, year, trades, isActiveDay, onSelectDay\n  } = props;\n\n  const totalProfit = getTotalProfitFromTrades(trades);\n  const tickers = getTickersFromTrades(trades);\n  const numberOfTrades = (trades || []).length;\n\n  const isTotalProfitNegative = totalProfit.includes('-');\n\n  if (isVoidDay) {\n    return (\n      <div className={`Day ${isVoidDay ? 'void' : ''}`}></div>\n    )\n  }\n\n  return (\n    <div \n      className={`\n        Day p-1 \n        ${!isVoidDay ? 'date' : ''} \n        ${numberOfTrades < 0 ? 'bg-white text-black' : ''} \n        ${numberOfTrades && isTotalProfitNegative ? 'bg-red-600 text-white' : ''} \n        ${numberOfTrades && !isTotalProfitNegative ? 'bg-green-700 text-white' : ''} \n        ${isActiveDay ? 'border-4 border-yellow-500' : ''}\n      `} \n      id={`${month}-${date}-${year}`}\n      onClick={() => onSelectDay({ month, date, year, trades })}\n    >\n      <span class=\"date-label sm:block\">{date}</span>\n      {numberOfTrades > 0 \n        ? (\n          <div class=\"daily-stat py-1\">\n          {!!totalProfit ? (\n            <p class=\"profit items-center mb-1 hidden sm:block\">\n              <span class=\"label text-gray-300 font-light hidden sm:block\">P/L</span>\n              <span class=\"text-xs font-bold hidden sm:block\">${totalProfit}</span>\n            </p>\n          ) : ''}\n          {!!numberOfTrades ? (\n            <p class=\"number-of-trades pb-1 hidden sm:block\">\n              <span class=\"label text-gray-300 font-light hidden sm:block\">Trades</span>\n              <span class=\"ml-2 font-bold hidden sm:block\">{numberOfTrades}</span>\n            </p>\n          ) : ''}\n          {!!tickers ? (\n            <p class=\"tickers border-opacity-0 sm:border-opacity-100 border-t sm:border-gray-300 text-gray pt-1 hidden sm:block\">\n              <span class=\"text-gray-300 font-light hidden sm:block\">{tickers}</span>\n            </p>\n          ) : ''}\n        </div>\n        ) \n        : ''\n      }\n    </div>\n  );\n}\n\nexport default Day;\n","import { findMatchingTradesByDate, getDateFromDate, getMonthFromDate, getNumberOfDaysInMonth, getUniqueId, getYearFromDate } from \"../utils\";\nimport Day from \"./Day\";\n\nconst DaysGrid = (props) => {\n  const { \n    activeDate,  \n    activeDateDate,\n    activeMonth,\n    activeYear,\n    activeTradeLogs,\n    todayDate,\n    onSelectDay,\n  } = props;\n  \n  const numberOfDaysInMonth = getNumberOfDaysInMonth(\n    activeDate.getMonth(), \n    activeYear\n  ); // i.e., 28, 30, 31\n  const firstOfMonth = new Date(`${activeMonth} 1, ${activeYear}`);\n  const indexOfFirstDayInMonth = firstOfMonth.getDay(); // i.e., 0-6, Sun - Saturday \n\n  // calculates total number of day blocks to show on calendar (includes \n  // both void days in the beginning of month and the total number of days \n  // in that month). Note: \"void\" days referring to the grey blocked days \n  // in this calendar - https://i.postimg.cc/SxqdHqgN/Screen-Shot-2021-09-25-at-11-28-17-PM.png, as an example\n  const numberOfDaysInGrid = numberOfDaysInMonth + indexOfFirstDayInMonth;\n\n  // console.log({\n  //   numberOfDaysInMonth,\n  //   firstOfMonth,\n  //   indexOfFirstDayInMonth,\n  //   numberOfDaysInGrid,\n  //   daysInGrid\n  // });\n\n  const daysInGrid = [...Array(numberOfDaysInGrid).keys()]\n    // maps over each day, calculates void day and month, date, and year info\n    .map((_, index) => {\n      const isVoidDay = index < indexOfFirstDayInMonth;\n      return {\n        isVoidDay,\n        month: isVoidDay ? null : `${activeMonth}`,\n        date: isVoidDay ? null : `${(index - indexOfFirstDayInMonth) + 1}`,\n        year: isVoidDay ? null : `${activeYear}`,\n      }\n    })\n    // maps over each day and finds potential matching stocks from that day \n    .map((dayGrid) => {\n      const { month, date, year } = dayGrid;\n      const matchingTrades = findMatchingTradesByDate(\n        activeTradeLogs, \n        month, \n        date, \n        year\n      );\n      return { \n        ...dayGrid, \n        trades: matchingTrades || [], \n      };\n    });\n  \n  console.log({\n    numberOfDaysInMonth,\n    firstOfMonth,\n    indexOfFirstDayInMonth,\n    numberOfDaysInGrid,\n    daysInGrid\n  });\n\n  // return null;\n\n  return (\n    <div className=\"DaysGrid month-grid\" id=\"month-grid\">\n      {daysInGrid.map((daysInGrid) => {\n        const { month, date, year, isVoidDay } = daysInGrid;\n        const isActiveDay = (`${getDateFromDate(activeDate)}` === date) \n          && (`${getMonthFromDate(activeDate)}` === month) \n          && (`${getYearFromDate(activeDate)}` === year);\n        return (\n          <Day \n            key={isVoidDay ? `${getUniqueId()}` :`${month}-${date}-${year}`} \n            {...daysInGrid} \n            isActiveDay={isActiveDay}\n            onSelectDay={onSelectDay}\n          />\n        )\n      })}\n    </div>\n  );\n}\n\nexport default DaysGrid;","import DayLabels from \"./DayLabels\";\nimport DaysGrid from \"./DaysGrid\";\n\nconst MonthlyCalendarGrid = (props) => {\n  return (\n    <section className=\"MonthlyCalendarGrid my-2\">\n      <DayLabels />\n      <DaysGrid {...props} />\n    </section>\n  )\n}\n\nexport default MonthlyCalendarGrid;","const MonthlyStats = (props) => {\n  const { gains, losses, profit } = props;\n  const isTotalProfitNegative = profit.includes('-');\n\n  if (!gains || !losses || !profit) return null;\n\n  return (\n    <div className=\"MonthlyStats monthly-stats flex\">\n      <p className=\"gains my-1\">\n        <sub className=\"text-gray-400\">Gains: </sub> \n        <span className=\"text-green-900 title-font sm:text-3xl text-2xl font-medium\"> ${gains} </span>\n      </p>\n      <p className=\"losses text-red-900 my-1 ml-2\">\n        <sub className=\"text-gray-400\">Losses: </sub> \n        <span className=\"text-red-900 title-font sm:text-3xl text-2xl font-medium\"> ${losses} </span>\n      </p>\n      <p className=\"p-l text-gray-900 my-1 ml-2\">\n        <sub className=\"text-gray-400\">P/L: </sub> \n        <span className={`${isTotalProfitNegative ? 'text-red-900' : 'text-green-900'} text-gray-500 title-font sm:text-3xl text-2xl font-medium`}> ${profit} </span> \n      </p>\n    </div>\n  )\n}\n\nexport default MonthlyStats;","import { AiOutlineArrowLeft, AiOutlineArrowRight } from \"react-icons/ai\";\n\nconst MonthNavigator = (props = {}) => {\n  const { \n    prevMonth, \n    nextMonth, \n    onClickOnPrevMonth,\n    onClickOnNextMonth,\n  } = props;\n  \n  if (!prevMonth || !nextMonth) return null;\n\n  return (\n    <div className=\"MonthNavigator flex items-center\">\n      <button type=\"button\" className=\"inline-flex items-center justify-center px-2 py-1 border border-transparent text-base font-small text-white bg-indigo-600 hover:bg-indigo-700\" onClick={onClickOnPrevMonth}>\n        <AiOutlineArrowLeft className=\"mr-1\" /> {prevMonth}\n      </button>\n\n      <button type=\"button\" className=\"inline-flex items-center justify-center px-2 py-1 ml-1 border border-transparent text-base font-small text-white bg-indigo-600 hover:bg-indigo-700\" onClick={onClickOnNextMonth}>\n        {nextMonth} <AiOutlineArrowRight className=\"ml-1\" />\n      </button>\n    </div>\n  );\n};\n\nexport default MonthNavigator;","const TradeLogDeleteConfirmModal = (props) => {\n  const { tradeToDelete, onConfirmDeleteTrade, onClose } = props;\n  return (\n    <div class=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\n      <div class=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        {/* <!--\n          Background overlay, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0\"\n            To: \"opacity-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100\"\n            To: \"opacity-0\"\n        --> */}\n        <div class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" aria-hidden=\"true\"></div>\n\n        {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n        <span class=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n        {/* <!--\n          Modal panel, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            To: \"opacity-100 translate-y-0 sm:scale-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100 translate-y-0 sm:scale-100\"\n            To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        --> */}\n        <div class=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n          <div class=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n            <div class=\"sm:flex sm:items-start\">\n              <div class=\"mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\">\n                {/* <!-- Heroicon name: outline/exclamation --> */}\n                <svg class=\"h-6 w-6 text-red-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n                </svg>\n              </div>\n              <div class=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                <h3 class=\"text-lg leading-6 font-medium text-gray-900\" id=\"modal-title\">\n                  Delete Trade Log\n                </h3>\n                <div class=\"mt-2\">\n                  <p class=\"text-sm text-gray-500\">\n                    Are you sure?\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n            <button type=\"button\" class=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm\" onClick={() => onConfirmDeleteTrade(tradeToDelete)}>\n              Delete\n            </button>\n            <button type=\"button\" class=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\" onClick={() => onClose()}>\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TradeLogDeleteConfirmModal;","import React, { Component } from \"react\"\n\nclass UpdateTradeSuccessAlert extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: true,\n    }\n  }\n\n  componentDidMount() {\n    const self = this;\n    setTimeout(() => {\n      self.setState({ isOpen: false });\n    }, this.props.alertDurationInSeconds || 5000);\n  }\n\n  render() {\n    if (!this.state.isOpen) return null;    \n\n    return (\n      <div class=\"w-1/4 mx-auto fixed bottom-0 mb-3 mr-3\">\n        <div class=\"flex p-5 rounded-lg shadow-lg bg-white\">\n        <div>\n          <svg class=\"w-6 h-6 fill-current text-green-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4 8-8z\"/></svg>\n        </div>\n        <div class=\"ml-3\">\n          <h2 class=\"font-semibold text-gray-800\">Success!</h2>\n          <p class=\"mt-2 text-sm text-gray-600 leading-relaxed\">Trade log has been updated</p>\n        </div>\n        </div>\n      </div>\n    )\n\n  }\n}\n\nexport default UpdateTradeSuccessAlert;","import React, { Component } from \"react\";\nimport { filterTradesByMonthAndYear, getDateFromDate, getMonthFromDate, getNextMonthFromDate, getPrevMonthFromDate, getStatsFromTrades, getYearFromDate } from \"../utils\";\nimport { createNewTradeLog, deleteTradeLog, updateTradeLog } from \"../vendors/firebase/firebase.firestore\";\nimport AddNewTradeBtn from \"./AddNewTradeBtn\";\nimport AddNewTradeFormModal from \"./AddNewTradeFormModal\";\nimport AddNewTradeSuccessAlert from \"./AddNewTradeSuccessAlert\";\nimport DailyTradesModal from \"./DailyTradesModal\";\nimport DeleteTradeSuccessAlert from \"./DeleteTradeSuccessAlert\";\nimport EditTradeFormModal from \"./EditTradeFormModal\";\nimport MonthlyCalendarGrid from \"./MonthCalendarGrid\";\nimport MonthlyStats from \"./MonthlyStats\";\nimport MonthNavigator from \"./MonthNavigator\";\nimport TradeLogDeleteConfirmModal from \"./TradeLogDeleteConfirmModal\";\nimport UpdateTradeSuccessAlert from \"./UpdateTradeSuccessAlert\";\n\nclass MonthlyCalendar extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      todayDate: new Date(),\n      activeDate: new Date(),\n      \n      showDailyTradesModal: false,\n      showAddNewTradeFormModal: false,\n      showAddNewTradeSuccessAlert: false,\n      showEditTradeFormModal: false,\n      showUpdateTradeSuccessAlert: false,\n      showDeleteTradeSuccessAlert: false,\n      showTradeLogDeleteConfirmModal: false,\n\n      newTradeLogError: null,\n      editTradeLogError: null,\n      deleteTradeLogError: null,\n\n      tradeToEdit: null,\n      tradeToDelete: null,\n    }\n\n    // this.fetchActiveMonthTradeLogs = this.fetchActiveMonthTradeLogs.bind(this);\n    this.onClickOnPrevMonth = this.onClickOnPrevMonth.bind(this);\n    this.onClickOnNextMonth = this.onClickOnNextMonth.bind(this);\n    this.onSelectDay = this.onSelectDay.bind(this);\n    this.setShowDailyTradesModal = this.setShowDailyTradesModal.bind(this);\n    this.setShowAddNewTradeFormModal = this.setShowAddNewTradeFormModal.bind(this);\n    this.onCreateNewTradeLog = this.onCreateNewTradeLog.bind(this);\n    this.onOpenAddNewTradeForm = this.onOpenAddNewTradeForm.bind(this);\n    this.setShowAddNewTradeSuccessAlert = this.setShowAddNewTradeSuccessAlert.bind(this);\n    this.onUpdateNewTradeLog = this.onUpdateNewTradeLog.bind(this);\n    this.setShowEditTradeFormModal = this.setShowEditTradeFormModal.bind(this);\n    this.onDeleteTradeLog = this.onDeleteTradeLog.bind(this);\n    this.onEditTradeLog = this.onEditTradeLog.bind(this);\n    this.setShowUpdateTradeSuccessAlert = this.setShowUpdateTradeSuccessAlert.bind(this);\n    this.setShowTradeLogDeleteConfirmModal = this.setShowTradeLogDeleteConfirmModal.bind(this);\n    this.onConfirmDeleteTrade = this.onConfirmDeleteTrade.bind(this);\n    this.setShowDeleteTradeSuccessAlert = this.setShowDeleteTradeSuccessAlert.bind(this);\n  }\n\n  // getTradesByMonthAndYear = async (props) => {\n  //   const { user, activeDate } = props;\n  //   const { uid } = user || {};\n  //   const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n  //   const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n  \n  //   const fetchedAllTrades = await fetchAllTradesByUserId(uid);\n  //   const filteredTradesByMonthAndYear = filterTradesByMonthAndYear(\n  //     fetchedAllTrades,\n  //     activeMonth,\n  //     activeYear,\n  //   );\n  //   console.log({ fetchedAllTrades, filteredTradesByMonthAndYear });\n  //   props.setState(() => {\n  //     return { tradeLogs: filteredTradesByMonthAndYear }; \n  //   });\n  // }\n\n  // async fetchActiveMonthTradeLogs() {\n  //   const { activeDate, user } = this.state;\n  //   const userId = user?.uid || {};\n\n  //   const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n  //   const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n    \n  //   // const fetchedAllTrades = await fetchAllTradesByUserId(userId);\n  //   // const filteredTradesByMonthAndYear = filterTradesByMonthAndYear(\n  //   //   fetchedAllTrades,\n  //   //   activeMonth,\n  //   //   activeYear,\n  //   // );\n  //   // console.log({ fetchedAllTrades, filteredTradesByMonthAndYear });\n  //   // props.setState(() => {\n  //   //   return { tradeLogs: filteredTradesByMonthAndYear }; \n  //   // });\n  // }\n \n  componentDidMount() {\n    // this.fetchActiveMonthTradeLogs();\n  }\n\n  onClickOnPrevMonth = () => {\n    const { activeDate } = this.state;\n    console.log('click on prev month detected...');\n    const firstOfPrevMonth = getPrevMonthFromDate(activeDate);\n    this.setState({ activeDate: firstOfPrevMonth });\n  }\n\n  onClickOnNextMonth = () => {\n    const { activeDate } = this.state;\n    console.log('click on next month detected...');\n    const firstOfNextMonth = getNextMonthFromDate(activeDate);\n    this.setState({ activeDate: firstOfNextMonth });\n  }\n\n  setShowDailyTradesModal(status = false) {\n    this.setState({ showDailyTradesModal: status })\n  }\n\n  setShowAddNewTradeFormModal(status = false) {\n    this.setState({ showAddNewTradeFormModal: status })\n  }\n\n  setShowAddNewTradeSuccessAlert(status = false) {\n    this.setState({ showAddNewTradeSuccessAlert: status });\n  }\n\n  setShowEditTradeFormModal(status = false) {\n    this.setState({ showEditTradeFormModal: status });\n  }\n\n  onSelectDay({ month, date, year }) {\n    this.setState({ activeDate: new Date(`${month} ${date}, ${year}`) });\n    this.setShowDailyTradesModal(true);\n  }\n\n  setShowTradeLogDeleteConfirmModal(status = false) {\n    this.setState({ showTradeLogDeleteConfirmModal: status })\n  }\n\n  setShowDeleteTradeSuccessAlert(status = false) {\n    this.setState({ showDeleteTradeSuccessAlert: status });\n  }\n\n  async onCreateNewTradeLog(newTradeLog) {\n    const { uid: userId } = this.props.user || {};\n    const { error, isNewTradeCreated } = await createNewTradeLog(newTradeLog, userId);\n    if (error) {\n      this.setState({ newTradeLogError: error });\n    } else {\n      console.info(`New Trade created... ${isNewTradeCreated}`);\n      this.setShowAddNewTradeFormModal(false);\n      this.setShowAddNewTradeSuccessAlert(true);\n      this.props.refetchAllTrades();\n    }\n  } \n\n  setShowUpdateTradeSuccessAlert(status = false) {\n    this.setState({ showUpdateTradeSuccessAlert: status });\n  }\n  \n  async onUpdateNewTradeLog(updatedTradeLog) {\n    const { uid: userId } = this.props.user || {};\n    const { error, isTradeLogUpdated } = await updateTradeLog(updatedTradeLog.tradeId, updatedTradeLog, userId);\n    if (error) {\n      this.setState({ editTradeLogError: error });\n    } else {\n      console.info(`Trade updated... ${isTradeLogUpdated}`);\n      this.setShowEditTradeFormModal(false);\n      this.setShowUpdateTradeSuccessAlert(true);\n      this.props.refetchAllTrades();\n    }\n  }\n\n  onOpenAddNewTradeForm() {\n    this.setShowDailyTradesModal(false);\n    this.setShowAddNewTradeFormModal(true);\n  }\n\n  onDeleteTradeLog(tradeToDelete) {\n    this.setShowDailyTradesModal(false);\n    this.setState({ \n      tradeToDelete, \n      showTradeLogDeleteConfirmModal: true,\n    });\n  }\n\n  onEditTradeLog(tradeToEdit) {\n    this.setShowDailyTradesModal(false);\n    this.setState({ \n      tradeToEdit, \n      showEditTradeFormModal: true \n    });\n  } \n\n  async onConfirmDeleteTrade(tradeToDelete) {\n    const { uid: userId } = this.props.user || {};\n    const { error, isTradeLogDeleted } = await deleteTradeLog(\n      tradeToDelete.tradeId, \n      userId\n    );\n    if (error) {\n      this.setState({ deleteTradeLogError: error });\n    } else {\n      console.info(`Trade deleted... ${isTradeLogDeleted}`);\n      this.setShowTradeLogDeleteConfirmModal(false);\n      this.setShowDeleteTradeSuccessAlert(true);\n      this.props.refetchAllTrades();\n    }\n  }\n\n  render() {\n    const { allTradeLogs } = this.props;\n    const { \n      activeDate, \n      showDailyTradesModal, \n      showAddNewTradeFormModal, \n      showEditTradeFormModal, \n      newTradeLogError, \n      editTradeLogError, \n      showAddNewTradeSuccessAlert, \n      tradeToEdit,\n      showUpdateTradeSuccessAlert,\n      tradeToDelete,\n      showTradeLogDeleteConfirmModal,\n      showDeleteTradeSuccessAlert,\n    } = this.state;\n\n    const activeDateDate = getDateFromDate(activeDate).toString();  // i.e., \"February\"\n    const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n    const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n    \n    const activeTradeLogs = filterTradesByMonthAndYear(\n      allTradeLogs, \n      activeMonth, \n      activeYear\n    );\n\n    const { gains, losses, profit } = getStatsFromTrades(activeTradeLogs);\n\n    console.log({ ...this.props, ...this.state });\n    \n    return (\n      <article className=\"MonthlyCalendar\">\n        <header className=\"flex py-2 px-2 justify-between items-center flex-wrap\">\n          <MonthNavigator\n            prevMonth={getMonthFromDate(getPrevMonthFromDate(activeDate))}\n            nextMonth={getMonthFromDate(getNextMonthFromDate(activeDate))}\n            onClickOnPrevMonth={this.onClickOnPrevMonth}\n            onClickOnNextMonth={this.onClickOnNextMonth}\n          />\n          <h1 className=\"active-date sm:text-3xl text-2xl font-medium title-font text-gray-900 text-center\"> {activeMonth} {activeDateDate}, {activeYear} </h1>\n          <MonthlyStats\n            gains={gains}\n            losses={losses}\n            profit={profit}\n          />\n        </header>\n        \n        <section>\n          <MonthlyCalendarGrid \n            {...this.state} \n            activeDateDate={activeDateDate}\n            activeMonth={activeMonth}\n            activeYear={activeYear}\n            activeTradeLogs={activeTradeLogs} \n            onSelectDay={this.onSelectDay}\n          />\n        </section>\n\n        <AddNewTradeBtn onClick={() => this.setShowAddNewTradeFormModal(true)} />\n\n        {showAddNewTradeSuccessAlert && (\n          <AddNewTradeSuccessAlert />\n        )}\n\n        {showUpdateTradeSuccessAlert && (\n          <UpdateTradeSuccessAlert />\n        )}\n\n        {showDeleteTradeSuccessAlert && (\n          <DeleteTradeSuccessAlert />\n        )}\n\n        {showTradeLogDeleteConfirmModal && (\n          <TradeLogDeleteConfirmModal\n            tradeToDelete={tradeToDelete}\n            onConfirmDeleteTrade={this.onConfirmDeleteTrade}\n            onClose={() => this.setShowTradeLogDeleteConfirmModal(false)}\n          />\n        )}\n\n        {showDailyTradesModal && (\n          <DailyTradesModal\n            activeDateDate={activeDateDate}\n            activeMonth={activeMonth}\n            activeYear={activeYear}\n            activeTradeLogs={activeTradeLogs}\n            onClose={() => this.setShowDailyTradesModal(false)}\n            onOpenAddNewTradeForm={this.onOpenAddNewTradeForm}\n            onDeleteTradeLog={this.onDeleteTradeLog}\n            onEditTradeLog={this.onEditTradeLog}\n          />\n        )}\n\n        {showAddNewTradeFormModal && (\n          <AddNewTradeFormModal\n            activeDateDate={activeDateDate}\n            activeMonth={activeMonth}\n            activeYear={activeYear}\n            newTradeLogError={newTradeLogError}\n            onCreateNewTradeLog={(newTradeLog) => this.onCreateNewTradeLog(newTradeLog)}\n            onClose={() => this.setShowAddNewTradeFormModal(false)}\n          />\n        )}\n\n        {showEditTradeFormModal && (\n          <EditTradeFormModal\n            tradeToEdit={tradeToEdit}\n            editTradeLogError={editTradeLogError}\n            onUpdateNewTradeLog={(updatedTradeLog) => this.onUpdateNewTradeLog(updatedTradeLog)}\n            onClose={() => this.setShowEditTradeFormModal(false)}\n          />\n        )}\n\n      </article>\n    )\n  }\n}\n\nexport default MonthlyCalendar;","import React, { Component } from 'react';\nimport { AiOutlineArrowLeft, AiOutlineArrowRight } from \"react-icons/ai\";\nimport './App.css';\nimport MonthlyCalendar from './MonthlyCalendar/MonthlyCalendar';\nimport { getUserFromLocalStorage, getTickersFromTrades, getTotalProfitFromTrades } from './utils';\nimport { fetchAllTradesByUserId } from './vendors/firebase/firebase.firestore';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: getUserFromLocalStorage(),\n      allTradeLogs: [],\n    }\n\n    this.fetchAllTrades = this.fetchAllTrades.bind(this);\n  }\n\n  async fetchAllTrades() {\n    const { user } = this.state;\n    \n    if (!user || user === null) return;\n\n    const { uid: userId } = user || {};\n\n    const fetchedTradeLogs = await fetchAllTradesByUserId(userId);\n    \n    this.setState({ \n      // allTradeLogs: [\n      //   {\n      //     closingPrice: \"8.00\",\n      //     date: \"12\",\n      //     month: \"October\",\n      //     notes: \"\",\n      //     numberOfShares: 2,\n      //     openingPrice: \"10.00\",\n      //     stopLoss: \"9.00\",\n      //     takeProfit: \"15.00\",\n      //     ticker: \"LOL\",\n      //     tradeId: \"sd7f7f8d57fd\",\n      //     year: \"2021\",\n      //     tradeType: 'long',\n      //   },\n      //   {\n      //     closingPrice: \"12.00\",\n      //     date: \"14\",\n      //     month: \"October\",\n      //     notes: \"\",\n      //     numberOfShares: 2,\n      //     openingPrice: \"10.00\",\n      //     stopLoss: \"9.00\",\n      //     takeProfit: \"15.00\",\n      //     ticker: \"GOOGL\",\n      //     tradeId: \"g76df7dg76fg6\",\n      //     year: \"2021\",\n      //     tradeType: 'long',\n      //   },\n      //   {\n      //     closingPrice: \"8.00\",\n      //     date: \"14\",\n      //     month: \"October\",\n      //     notes: \"\",\n      //     numberOfShares: 2,\n      //     openingPrice: \"10.00\",\n      //     stopLoss: \"9.00\",\n      //     takeProfit: \"15.00\",\n      //     ticker: \"GOOGL\",\n      //     tradeId: \"df678d867fg\",\n      //     year: \"2021\",\n      //     tradeType: 'long',\n      //   }\n      // ],\n      allTradeLogs: fetchedTradeLogs \n    });\n  }\n\n  componentDidMount() {\n    this.fetchAllTrades();\n  }\n\n  render() {\n    console.log({ props: this.props, state: this.state });\n    return (\n      <div className=\"App Dashboard\">\n        <MonthlyCalendar {...this.props} {...this.state} refetchAllTrades={this.fetchAllTrades} />\n      </div>\n    ); \n  }\n}\n\nexport default App;\n\n\n\n\n// const Day = (props) => {\n//   const { \n//     isVoidDay = false, \n//     month = 'October', \n//     date = '10', \n//     year = '2021', \n//     trades = [], \n//     isActiveDay = false,\n//   } = props;\n\n//   const totalProfit = getTotalProfitFromTrades(trades);\n//   const tickers = getTickersFromTrades(trades);\n//   const numberOfTrades = trades?.length || 0;\n//   const isTotalProfitNegative = totalProfit < 0;\n\n//   console.log({ date, totalProfit, tickers, numberOfTrades });\n\n//   if (isVoidDay) {\n//     return (\n//       <div className={`Day ${isVoidDay ? 'void' : ''}`}></div>\n//     );\n//   }\n\n//   return (\n//     <div \n//       className={`\n//         Day p-1 \n//         ${!isVoidDay ? 'date' : ''} \n//         ${numberOfTrades < 0 ? 'bg-light text-black' : ''} \n//         ${numberOfTrades && isTotalProfitNegative ? 'bg-danger text-white' : ''} \n//         ${numberOfTrades && !isTotalProfitNegative \n//           ? 'bg-success text-white' : ''} \n//         ${isActiveDay ? 'border border-warning border-4' : ''}\n//       `} \n//       id={`${month}-${date}-${year}`}\n//     >\n\n//       <span className=\"date-label\">{date}</span>\n\n//       {numberOfTrades > 0 \n//         ? (\n//           <div className=\"daily-stat p-2\">\n//             {!!totalProfit ? (\n//               <p className=\"profit mt-1 mb-1 border-bottom border-light\">\n//                 <span className=\"label\">Profit</span>\n//                 <span className=\"value\">{totalProfit}</span>\n//               </p>\n//             ) : ''}\n//             {!!numberOfTrades ? (\n//               <p className=\"number-of-trades mt-1 mb-1 border-bottom border-light\">\n//                 <span className=\"label\"># Trades</span>\n//                 <span className=\"value\">{numberOfTrades}</span>\n//               </p>\n//             ) : null}\n//             {!!tickers ? (\n//               <p className=\"tickers mt-1 mb-1\">\n//                 <span className=\"value\">{tickers}</span>\n//               </p>\n//             ) : null}\n//           </div>\n//         ) : null\n//       }\n//     </div>\n//   );\n// };\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createNewTradeLog, deleteTradeLog, fetchAllTradesByUserId, updateTradeLog } from './vendors/firebase/firebase.firestore';\n// import reportWebVitals from './reportWebVitals';\n\n// const userId = 'H8XTiCvnxOWojohm2DewzlBxrjG2';\n// const newTradeLog = {\n//   tradeId: 'sd7f7f8d57fd',\n//   closingPrice: '15.00',\n//   openingPrice: '10.00',\n//   stopLoss: '9.00',\n//   takeProfit: '15.00',\n//   date: '13',\n//   month: 'October',\n//   year: '2021',\n//   notes: '',\n//   numberOfShares: 2,\n//   ticker: 'GOOGL',\n// };\n// const updatedTradeLog = {\n//   tradeId: 'sd7f7f8d57fd',\n//   closingPrice: '15.00',\n//   openingPrice: '10.00',\n//   stopLoss: '9.00',\n//   takeProfit: '15.00',\n//   date: '13',\n//   month: 'October',\n//   year: '2021',\n//   notes: '',\n//   numberOfShares: 2,\n//   ticker: 'LOL',\n// };\n// const tradeLogId = 'sd7f7f8d57fd';\n\n\n// fetchAllTradesByUserId('H8XTiCvnxOWojohm2DewzlBxrjG2');\n// createNewTradeLog(newTradeLog, userId);\n// deleteTradeLog(tradeLogId, userId);\n// updateTradeLog(tradeLogId, updatedTradeLog, userId);\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}