{"version":3,"sources":["utils/index.js","MonthlyCalendar/AddNewTradeBtn.js","MonthlyCalendar/AddNewTradeFormModal.js","MonthlyCalendar/DailyTradesModal.js","MonthlyCalendar/DayLabels.js","MonthlyCalendar/Day.js","MonthlyCalendar/DaysGrid.js","MonthlyCalendar/MonthCalendarGrid.js","MonthlyCalendar/MonthlyStats.js","MonthlyCalendar/MonthNavigator.js","MonthlyCalendar/MonthlyCalendar.js","vendors/firebase/firebase.js","App.js","vendors/firebase/firebase.firestore.js","index.js"],"names":["getTotalProfitFromTrades","trades","length","totalProfit","map","trade","tradeType","openingPrice","parseFloat","toFixed","closingPrice","numberOfShares","parseInt","console","log","reduce","eachTradeProfit","getUserFromLocalStorage","userStringified","localStorage","getItem","JSON","parse","getMonthFromDate","date","Error","monthIndex","getMonth","getDateFromDate","getDate","getYearFromDate","getFullYear","getPrevMonthFromDate","Date","x","setDate","setMonth","getNextMonthFromDate","findMatchingTradesByDate","month","year","Array","isArray","filter","AddNewTradeBtn","props","onClick","class","viewBox","fill","d","AddNewTradeFormModal","activeDateDate","activeMonth","activeYear","onClose","onFormSubmit","className","role","id","onSubmit","for","defaultChecked","xmlns","type","placeholder","min","name","rows","DailyTradesModal","activeTradeLogs","activeDateTradeLogs","activeTradeLog","profit","isProfitNegative","includes","ticker","organization","stopLoss","takeProfit","DayLabels","Day","isVoidDay","isActiveDay","onSelectDay","tickers","join","getTickersFromTrades","numberOfTrades","isTotalProfitNegative","DaysGrid","activeDate","todayDate","numberOfDaysInMonth","firstOfMonth","indexOfFirstDayInMonth","getDay","numberOfDaysInGrid","daysInGrid","keys","_","index","dayGrid","matchingTrades","uniqid","MonthlyCalendarGrid","MonthlyStats","gains","losses","MonthNavigator","prevMonth","nextMonth","onClickOnPrevMonth","onClickOnNextMonth","MonthlyCalendar","state","firstOfPrevMonth","setState","firstOfNextMonth","showDailyTradesModal","showAddNewTradeFormModal","bind","setShowDailyTradesModal","setShowAddNewTradeFormModal","status","this","allTradeLogs","toString","filterTradesByMonthAndYear","stats","getStatsFromTrades","Component","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","getFirestore","user","a","uid","notes","tradeId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abe4922f.chunk.js","sourcesContent":["import uniqid from 'uniqid';\n\nexport const getStatsFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return {\n    gains: '0.00',\n    losses: '0.00',\n    profit: '0.00',\n  };\n  const stats = trades\n    // extract each trade properties to calculate total profit\n    .map(trade => ({ \n      tradeType: trade.tradeType, \n      openingPrice: parseFloat(trade.openingPrice).toFixed(2),\n      closingPrice: parseFloat(trade.closingPrice).toFixed(2),\n      numberOfShares: parseInt(trade.numberOfShares),\n    }))\n    // calculate each trade profit by trade type\n    .map((trade) => {\n      // on short trade, opening price > closing price\n      if (trade.tradeType === 'short') {\n        return (trade.openingPrice - trade.closingPrice) * trade.numberOfShares;\n      }\n      // on long trade, closing price > opening price\n      return (trade.closingPrice - trade.openingPrice) * trade.numberOfShares;\n    }) \n    // adds up all the trade profits together\n    .reduce((stats, eachTradeProfit) => {\n      if (eachTradeProfit > 0) {\n        stats.gains = stats.gains + eachTradeProfit;\n      }\n      if (eachTradeProfit < 0) {\n        stats.losses = stats.losses + eachTradeProfit;\n      }\n      stats.profit = stats.profit + eachTradeProfit;\n      return stats;\n    }, {\n      gains: 0.00,\n      losses: 0.00,\n      profit: 0.00,\n    });\n  return {\n    gains: parseFloat(stats.gains).toFixed(2),\n    losses: parseFloat(stats.losses).toFixed(2),\n    profit: parseFloat(stats.profit).toFixed(2),\n  }\n}\n\nexport const getTotalProfitFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return '0.00';\n  const totalProfit = trades\n    // extract each trade properties to calculate total profit\n    .map(trade => ({ \n      tradeType: trade.tradeType, \n      openingPrice: parseFloat(trade.openingPrice).toFixed(2),\n      closingPrice: parseFloat(trade.closingPrice).toFixed(2),\n      numberOfShares: parseInt(trade.numberOfShares),\n    }))\n    // calculate each trade profit by trade type\n    .map((trade) => {\n      console.log({ trade });\n      // on short trade, opening price > closing price\n      if (trade.tradeType === 'short') {\n        return (trade.openingPrice - trade.closingPrice) * trade.numberOfShares;\n      }\n      // on long trade, closing price > opening price\n      return (trade.closingPrice - trade.openingPrice) * trade.numberOfShares;\n    }) \n    // adds up all the trade profits together\n    .reduce((totalProfit, eachTradeProfit) => {\n      console.log({ eachTradeProfit });\n      return totalProfit + eachTradeProfit;\n    }, 0);\n  console.log({ totalProfit });\n  return parseFloat(totalProfit).toFixed(2);\n}\n\nexport const getTickersFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return '';\n  return trades\n    .map(trade => trade.ticker)\n    .join(', ');\n}\n\nexport const getUserFromLocalStorage = () => {\n  const userStringified = localStorage.getItem('logtrade:::user');\n  if (userStringified === null) return null;\n  return JSON.parse(userStringified);\n}\n\nexport const getMonthFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n\n  const MONTHS_FULL= [\n    \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n    \"August\",\"September\",\"October\",\"November\",\"December\"\n  ];\n\n  const monthIndex = date.getMonth();\n\n  if (monthIndex < 0 || monthIndex > 11) {\n    throw new Error(\n      'Invalid month detected, check to ensure valid date is passed'\n    );\n  }\n\n  return MONTHS_FULL[monthIndex];\n}\n\nexport const getDateFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  return date.getDate();\n}\n\nexport const getYearFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  return date.getFullYear();\n}\n\nexport const getDayFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  const DAYS = [\n    'Sunday', 'Monday', 'Tuesday', 'Wednesday', \n    'Thursday', 'Friday', 'Saturday'\n  ];\n\n  const dayIndex = date.getDay();\n\n  if (dayIndex < 0 || dayIndex > 6) {\n    throw new Error(\n      'Invalid day detected, check to ensure valid date is passed'\n    );\n  }\n\n  return DAYS[dayIndex];\n}\n\nexport const getNumberOfDaysInMonth = (month, year) => {\n  return new Date(year, month + 1, 0).getDate();\n};\n\n/**\n * Given a date, returns date of previous month. Note: the default date \n * if previous month is set to 1 by default\n * @param {Date} date - a Date object\n * @returns {Date} - a Date object\n */\nexport const getPrevMonthFromDate = (date) => {\n  if (!date || !(date instanceof Date)) {\n    throw new Error(\n      'Please pass in a `Date` object to generate previous month'\n    );\n  }\n  const x = new Date(date);\n  x.setDate(1);\n  x.setMonth(x.getMonth() - 1);\n  return x;\n}\n\n/**\n * Given a date, returns date of next month. Note: the default date \n * if previous month is set to 1 by default\n * @param {Date} date - a Date object\n * @returns {Date} - a Date object\n */\n export const getNextMonthFromDate = (date) => {\n  if (!date || !(date instanceof Date)) {\n    throw new Error('Please pass in a `Date` object to generate next month');\n  }\n  const x = new Date(date);\n  x.setDate(1);\n  x.setMonth(x.getMonth() + 1);\n  return x;\n}\n\nexport const addMinutesToDate = (date = new Date(), minutesToAdd = 0) => {  \n  const currentDate = new Date();\n  const futureDate = new Date(currentDate.getTime() + (minutesToAdd * 60000));\n  return futureDate.getTime();\n}\n\nexport const filterTradesByMonthAndYear = (trades = [], month, year) => {\n  return trades.filter(trade => trade.month === month && trade.year === year);\n}\n\nexport const findMatchingTradesByDate = (trades = [], month, date, year) => {\n  if (!trades.length || !Array.isArray(trades)) return;\n  return trades.filter(trade => (\n    (trade.month === month) && \n    (trade.date === date) &&\n    (trade.year === year)\n  ));\n}\n\nexport const getUniqueId = () => uniqid('logtrade-');\n","const AddNewTradeBtn = props => {\n  const { onClick } = props;\n  return (\n    <div class=\"AddTradeBtn fixed bottom-1 right-1 mr-2 mb-2\">\n      <button\n        class=\"text-white px-4 w-auto h-12 bg-red-600 rounded-full hover:bg-red-700 active:shadow-lg mouse shadow transition ease-in duration-200 focus:outline-none\" onClick={onClick}>\n        <svg viewBox=\"0 0 20 20\" enable-background=\"new 0 0 20 20\" class=\"w-4 h-4 inline-block mr-1\">\n        <path fill=\"#FFFFFF\" d=\"M17.561,2.439c-1.442-1.443-2.525-1.227-2.525-1.227L8.984,7.264L2.21,14.037L1.2,18.799l4.763-1.01\n                                l6.774-6.771l6.052-6.052C18.788,4.966,19.005,3.883,17.561,2.439z M5.68,17.217l-1.624,0.35c-0.156-0.293-0.345-0.586-0.69-0.932\n                                c-0.346-0.346-0.639-0.533-0.932-0.691l0.35-1.623l0.47-0.469c0,0,0.883,0.018,1.881,1.016c0.997,0.996,1.016,1.881,1.016,1.881\n                                L5.68,17.217z\"/>\n      </svg>\n        <span>Add Trade</span>\n      </button>\n    </div>\n  )\n};\n\nexport default AddNewTradeBtn;","import { BiTrendingUp, BiTrendingDown } from 'react-icons/bi';\nimport { getTotalProfitFromTrades } from '../utils';\n\nconst AddNewTradeFormModal = props => {\n  const { activeDateDate, activeMonth, activeYear, onClose, onFormSubmit } = props;\n\n  return (\n    <div className=\"AddNewTradeFormModal fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\n      <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        {/* <!--\n          Background overlay, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0\"\n            To: \"opacity-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100\"\n            To: \"opacity-0\"\n        --> */}\n        <div \n        className={`fixed inset-0 bg-gray-500 bg-opacity-75`} aria-hidden=\"true\"></div>\n\n        {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n        {/* <!--\n          Modal panel, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            To: \"opacity-100 translate-y-0 sm:scale-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100 translate-y-0 sm:scale-100\"\n            To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        --> */}\n        <div className={`inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform sm:my-8 sm:align-middle sm:max-w-lg sm:w-full`}>\n          <div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n            <div className=\"w-full\">\n              <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                {/* <div className=\"flex flex-wrap justify-between\"> */}\n                <h3 className=\"text-2xl leading-6 font-medium text-gray-900 mb-2\" id=\"modal-title\">\n                  Add Trade\n                </h3>\n                <p className=\"text-sm text-gray-400\">{activeMonth} {activeDateDate}, {activeYear}</p>\n                \n                <div className=\"mt-2\">\n                  <div className=\"w-full flex flex-wrap\">\n\n\n                    <form className=\"w-full\" onSubmit={onFormSubmit}>\n\n\n                      <div class=\"flex flex-col my-3\">\n                        <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"ticker\">\n                          Ticker\n                        </label>\n                        <div class=\"relative\">\n                          <select class=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-state\">\n                            <option defaultChecked>Choose a ticker</option>\n                            <option>AAPL: Apple Inc.</option>\n                            <option>GOOGL: Google Inc.</option>\n                            <option>TSLA: Tesla Inc.</option>\n                          </select>\n                          <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                            <svg class=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\"/></svg>\n                          </div>\n                        </div>\n                      </div>\n\n\n                      <div class=\"flex flex-wrap justify-between items-center my-3\">\n                        <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"number-of-shares\">\n                          Number of Shares\n                        </label>\n                        <div class=\"mt-1 flex rounded-md shadow-sm\">\n                          {/* <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                            $\n                          </span> */}\n                          <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"number-of-shares\" type=\"number\" placeholder=\"2\" min=\"0\" />\n                        </div>\n                      </div>\n\n                      <div class=\"flex flex-wrap justify-between items-center my-3\">\n                        <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"opening-price\">\n                          Opening Price\n                        </label>\n                        <div class=\"mt-1 flex rounded-md shadow-sm\">\n                          <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                            $\n                          </span>\n                          <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"opening-price\" type=\"number\" placeholder=\"10.95\" min=\"0\" />\n                        </div>\n                      </div>\n\n                      <div class=\"flex flex-wrap justify-between items-center my-3\">\n                        <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"closing-price\">\n                          Closing Price\n                        </label>\n                        <div class=\"mt-1 flex rounded-md shadow-sm\">\n                          <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                            $\n                          </span>\n                          <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"closing-price\" type=\"number\" placeholder=\"10.95\" />\n                        </div>\n                      </div>\n\n                      <div class=\"flex flex-wrap justify-between items-center my-3\">\n                        <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"stop-loss\">\n                          Stop Loss\n                        </label>\n                        <div class=\"mt-1 flex rounded-md shadow-sm\">\n                          <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                            $\n                          </span>\n                          <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"stop-loss\" type=\"number\" placeholder=\"9.95\" />\n                        </div>\n                      </div>\n\n                      <div class=\"flex flex-wrap justify-between items-center my-3\">\n                        <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\" for=\"take-profit\">\n                          Take Profit\n                        </label>\n                        <div class=\"mt-1 flex rounded-md shadow-sm\">\n                          <span class=\"inline-flex items-center px-3 rounded-l-md bg-gray-100 text-gray-500 text-sm\">\n                            $\n                          </span>\n                          <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"take-profit\" type=\"number\" placeholder=\"15.95\" />\n                        </div>\n                      </div>\n\n                      <div class=\"flex flex-col mt-5 mb-3\">\n                        <label for=\"notes\" class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 mr-2\">Notes</label>\n                        <textarea id=\"notes\" name=\"notes\" class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" rows=\"4\"></textarea>\n                      </div>\n                  \n                    </form>\n\n                    \n                  </div>\n                </div>\n\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n            <button type=\"button\" className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm\">\n              Create Trade\n            </button>\n            <button type=\"button\" className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\" onClick={onClose}>\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddNewTradeFormModal;","import { BiTrendingUp, BiTrendingDown } from 'react-icons/bi';\nimport { getTotalProfitFromTrades, findMatchingTradesByDate } from '../utils';\n\nconst DailyTradesModal = props => {\n  const { activeDateDate, activeMonth, activeYear, activeTradeLogs = [], onClose } = props;\n  const activeDateTradeLogs = findMatchingTradesByDate(\n    activeTradeLogs, \n    activeMonth, \n    activeDateDate, \n    activeYear,\n  );\n  console.log({ activeDateDate, activeMonth, activeYear, activeTradeLogs, activeDateTradeLogs });\n  return (\n    <div className=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\n      <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        {/* <!--\n          Background overlay, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0\"\n            To: \"opacity-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100\"\n            To: \"opacity-0\"\n        --> */}\n        <div \n        className={`fixed inset-0 bg-gray-500 bg-opacity-75`} aria-hidden=\"true\"></div>\n\n        {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n        {/* <!--\n          Modal panel, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            To: \"opacity-100 translate-y-0 sm:scale-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100 translate-y-0 sm:scale-100\"\n            To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        --> */}\n        <div className={`inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform sm:my-8 sm:align-middle sm:max-w-lg sm:w-full`}>\n          <div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n            <div className=\"w-full\">\n              <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                {/* <div className=\"flex flex-wrap justify-between\"> */}\n                <h3 className=\"text-2xl leading-6 font-medium text-gray-900 mb-2\" id=\"modal-title\">\n                  Trade Log\n                </h3>\n                <p className=\"text-sm text-gray-400\">{activeMonth} {activeDateDate}, {activeYear}</p>\n                \n                <div className=\"mt-2\">\n                  <div className=\"w-full flex flex-wrap\">\n\n                    {!activeDateTradeLogs?.length && (\n                      <div class=\"w-full flex justify-center item-center p-3\">\n                        <p className=\"text-gray-400 italic\">No trade transaction</p>\n                      </div>\n                    )}\n\n                    {!!activeDateTradeLogs?.length && activeDateTradeLogs.map(activeTradeLog => {\n                      const profit = getTotalProfitFromTrades([{ ...activeTradeLog }]);\n                      const isProfitNegative = profit.includes('-');\n                      return (\n                        <div className=\"w-full bg-gray-100 bg-opacity-75 my-3\">\n                          <div className=\"h-full p-6 rounded-lg border-2 border-gray-300 flex flex-col\">\n                            <div className=\"flex flex-wrap justify-between\">\n                              <div className=\"flex flex-col\">\n                                <h2 className=\"text-sm tracking-widest title-font mb-1 font-medium\">{activeTradeLog.ticker}</h2>\n                                <h1 className=\"text-2xl title-font mb-1 font-medium\">{activeTradeLog.organization || 'Anonymous' }</h1>\n                              </div>\n                              <div className=\"profit\">\n                                <p className={`text-4xl font-bold ${isProfitNegative ? 'text-red-500' : 'text-green-500'} flex`}>\n                                  <span className=\"trend mr-2\"> \n                                    {isProfitNegative ? <BiTrendingDown /> : <BiTrendingUp />}\n                                  </span>  \n                                  <span className=\"value\">${profit}</span>\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex flex-wrap content-start text-center rounded bg-white border border-gray-200 mt-3 mb-3 py-2\">\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.openingPrice}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Open</p>\n                              </div>\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.closingPrice}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Close</p>\n                              </div>\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.numberOfShares}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Shares</p>\n                              </div>\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.stopLoss}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Stop Loss</p>\n                              </div>\n                              <div className=\"p-1 sm:w-1/2 lg:w-1/5 w-1/3\">\n                                <h2 className=\"title-font text-sm text-gray-900\">{activeTradeLog.takeProfit}</h2>\n                                <p className=\"leading-relaxed text-xs text-gray-400 font-light\">Take Profit</p>\n                              </div>\n                            </div>\n                            <div className=\"log-actions flex justify-center sm:justify-end\">\n                              <button className=\"lg:mt-2 xl:mt-0 btn-small text-white inline bg-yellow-500 border-0 text-xs py-2 px-4 focus:outline-none hover:bg-yellow-600 rounded\">Edit</button>\n                              <button className=\"lg:mt-2 xl:mt-0 ml-1 text-white bg-red-500 border-0 text-xs py-2 px-4 focus:outline-none hover:bg-red-600 rounded\">Delete</button>\n                            </div>\n                          </div>\n                        </div>\n                      )\n                    })}\n                    \n                  </div>\n                </div>\n\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n            <button type=\"button\" className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm\">\n              New Trade?\n            </button>\n            <button type=\"button\" className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\" onClick={onClose}>\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DailyTradesModal;","const DayLabels = props => {\n  return (\n    <div className=\"DayLabels day-labels\">\n      <p className=\"day\">Sunday</p>\n      <p className=\"day\">Monday</p>\n      <p className=\"day\">Tuesday</p>\n      <p className=\"day\">Wednesday</p>\n      <p className=\"day\">Thursday</p>\n      <p className=\"day\">Friday</p>\n      <p className=\"day\">Saturday</p>\n    </div>\n  )\n}\n\nexport default DayLabels;","import { getTickersFromTrades, getTotalProfitFromTrades } from \"../utils\";\n\nconst Day = props => {\n  // console.log({ props });\n  const { \n    isVoidDay, month, date, year, trades, isActiveDay, onSelectDay\n  } = props;\n\n  const totalProfit = getTotalProfitFromTrades(trades);\n  const tickers = getTickersFromTrades(trades);\n  const numberOfTrades = (trades || []).length;\n\n  const isTotalProfitNegative = totalProfit.includes('-');\n\n  if (isVoidDay) {\n    return (\n      <div className={`Day ${isVoidDay ? 'void' : ''}`}></div>\n    )\n  }\n\n  return (\n    <div \n      className={`\n        Day p-1 \n        ${!isVoidDay ? 'date' : ''} \n        ${numberOfTrades < 0 ? 'bg-white text-black' : ''} \n        ${numberOfTrades && isTotalProfitNegative ? 'bg-red-800 text-white' : ''} \n        ${numberOfTrades && !isTotalProfitNegative ? 'bg-green-700 text-white' : ''} \n        ${isActiveDay ? 'border-4 border-yellow-500' : ''}\n      `} \n      id={`${month}-${date}-${year}`}\n      onClick={() => onSelectDay({ month, date, year, trades })}\n    >\n      <span class=\"date-label\">{date}</span>\n      {numberOfTrades > 0 \n        ? (\n          <div class=\"daily-stat py-1\">\n          {!!totalProfit ? (\n            <p class=\"profit items-center mb-1\">\n              <span class=\"label text-gray-300 font-light\">P/L</span>\n              <span class=\"text-xs font-bold\">${totalProfit}</span>\n            </p>\n          ) : ''}\n          {!!numberOfTrades ? (\n            <p class=\"number-of-trades pb-1\">\n              <span class=\"label text-gray-300 font-light\">Trades</span>\n              <span class=\"ml-2 font-bold\">{numberOfTrades}</span>\n            </p>\n          ) : ''}\n          {!!tickers ? (\n            <p class=\"tickers border-t border-gray-300 text-gray justify-center pt-1\">\n              <span class=\"text-gray-300 font-light\">{tickers}</span>\n            </p>\n          ) : ''}\n        </div>\n        ) \n        : ''\n      }\n    </div>\n  );\n}\n\nexport default Day;\n","import { findMatchingTradesByDate, getDateFromDate, getMonthFromDate, getNumberOfDaysInMonth, getUniqueId, getYearFromDate } from \"../utils\";\nimport Day from \"./Day\";\n\nconst DaysGrid = (props) => {\n  const { \n    activeDate,  \n    activeDateDate,\n    activeMonth,\n    activeYear,\n    activeTradeLogs,\n    todayDate,\n    onSelectDay,\n  } = props;\n  \n  const numberOfDaysInMonth = getNumberOfDaysInMonth(\n    activeDate.getMonth(), \n    activeYear\n  ); // i.e., 28, 30, 31\n  const firstOfMonth = new Date(`${activeMonth} 1, ${activeYear}`);\n  const indexOfFirstDayInMonth = firstOfMonth.getDay(); // i.e., 0-6, Sun - Saturday \n\n  // calculates total number of day blocks to show on calendar (includes \n  // both void days in the beginning of month and the total number of days \n  // in that month). Note: \"void\" days referring to the grey blocked days \n  // in this calendar - https://i.postimg.cc/SxqdHqgN/Screen-Shot-2021-09-25-at-11-28-17-PM.png, as an example\n  const numberOfDaysInGrid = numberOfDaysInMonth + indexOfFirstDayInMonth;\n\n  // console.log({\n  //   numberOfDaysInMonth,\n  //   firstOfMonth,\n  //   indexOfFirstDayInMonth,\n  //   numberOfDaysInGrid,\n  //   daysInGrid\n  // });\n\n  const daysInGrid = [...Array(numberOfDaysInGrid).keys()]\n    // maps over each day, calculates void day and month, date, and year info\n    .map((_, index) => {\n      const isVoidDay = index < indexOfFirstDayInMonth;\n      return {\n        isVoidDay,\n        month: isVoidDay ? null : `${activeMonth}`,\n        date: isVoidDay ? null : `${(index - indexOfFirstDayInMonth) + 1}`,\n        year: isVoidDay ? null : `${activeYear}`,\n      }\n    })\n    // maps over each day and finds potential matching stocks from that day \n    .map((dayGrid) => {\n      const { month, date, year } = dayGrid;\n      const matchingTrades = findMatchingTradesByDate(\n        activeTradeLogs, \n        month, \n        date, \n        year\n      );\n      return { \n        ...dayGrid, \n        trades: matchingTrades || [], \n      };\n    });\n  \n  console.log({\n    numberOfDaysInMonth,\n    firstOfMonth,\n    indexOfFirstDayInMonth,\n    numberOfDaysInGrid,\n    daysInGrid\n  });\n\n  // return null;\n\n  return (\n    <div className=\"DaysGrid month-grid\" id=\"month-grid\">\n      {daysInGrid.map((daysInGrid) => {\n        const { month, date, year, isVoidDay } = daysInGrid;\n        const isActiveDay = (`${getDateFromDate(activeDate)}` === date) \n          && (`${getMonthFromDate(activeDate)}` === month) \n          && (`${getYearFromDate(activeDate)}` === year);\n        return (\n          <Day \n            key={isVoidDay ? `${getUniqueId()}` :`${month}-${date}-${year}`} \n            {...daysInGrid} \n            isActiveDay={isActiveDay}\n            onSelectDay={onSelectDay}\n          />\n        )\n      })}\n    </div>\n  );\n}\n\nexport default DaysGrid;","import DayLabels from \"./DayLabels\";\nimport DaysGrid from \"./DaysGrid\";\n\nconst MonthlyCalendarGrid = (props) => {\n  return (\n    <section className=\"MonthlyCalendarGrid my-2\">\n      <DayLabels />\n      <DaysGrid {...props} />\n    </section>\n  )\n}\n\nexport default MonthlyCalendarGrid;","const MonthlyStats = (props) => {\n  const { gains, losses, profit } = props;\n  const isTotalProfitNegative = profit.includes('-');\n\n  if (!gains || !losses || !profit) return null;\n\n  return (\n    <div className=\"MonthlyStats monthly-stats flex\">\n      <p className=\"gains my-1\">\n        <sub className=\"text-gray-400\">Gains: </sub> \n        <span className=\"text-green-900 title-font sm:text-3xl text-2xl font-medium\"> ${gains} </span>\n      </p>\n      <p className=\"losses text-red-900 my-1 ml-2\">\n        <sub className=\"text-gray-400\">Losses: </sub> \n        <span className=\"text-red-900 title-font sm:text-3xl text-2xl font-medium\"> ${losses} </span>\n      </p>\n      <p className=\"p-l text-gray-900 my-1 ml-2\">\n        <sub className=\"text-gray-400\">P/L: </sub> \n        <span className={`${isTotalProfitNegative ? 'text-red-900' : 'text-green-900'} text-gray-500 title-font sm:text-3xl text-2xl font-medium`}> ${profit} </span> \n      </p>\n    </div>\n  )\n}\n\nexport default MonthlyStats;","import { AiOutlineArrowLeft, AiOutlineArrowRight } from \"react-icons/ai\";\n\nconst MonthNavigator = (props = {}) => {\n  const { \n    prevMonth, \n    nextMonth, \n    onClickOnPrevMonth,\n    onClickOnNextMonth,\n  } = props;\n  \n  if (!prevMonth || !nextMonth) return null;\n\n  return (\n    <div className=\"MonthNavigator flex items-center\">\n      <button type=\"button\" className=\"inline-flex items-center justify-center px-2 py-1 border border-transparent text-base font-small text-white bg-indigo-600 hover:bg-indigo-700\" onClick={onClickOnPrevMonth}>\n        <AiOutlineArrowLeft className=\"mr-1\" /> {prevMonth}\n      </button>\n\n      <button type=\"button\" className=\"inline-flex items-center justify-center px-2 py-1 ml-1 border border-transparent text-base font-small text-white bg-indigo-600 hover:bg-indigo-700\" onClick={onClickOnNextMonth}>\n        {nextMonth} <AiOutlineArrowRight className=\"ml-1\" />\n      </button>\n    </div>\n  );\n};\n\nexport default MonthNavigator;","import React, { Component } from \"react\";\nimport { filterTradesByMonthAndYear, getDateFromDate, getMonthFromDate, getNextMonthFromDate, getPrevMonthFromDate, getStatsFromTrades, getYearFromDate } from \"../utils\";\nimport AddNewTradeBtn from \"./AddNewTradeBtn\";\nimport AddNewTradeFormModal from \"./AddNewTradeFormModal\";\nimport DailyTradesModal from \"./DailyTradesModal\";\nimport MonthlyCalendarGrid from \"./MonthCalendarGrid\";\nimport MonthlyStats from \"./MonthlyStats\";\nimport MonthNavigator from \"./MonthNavigator\";\n\nclass MonthlyCalendar extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      todayDate: new Date(),\n      activeDate: new Date(),\n      // activeDate: new Date(`December 10, 2021`),\n      // activeMonthTradeLogs: [],\n      showDailyTradesModal: false,\n      showAddNewTradeFormModal: true,\n    }\n\n    // this.fetchActiveMonthTradeLogs = this.fetchActiveMonthTradeLogs.bind(this);\n    this.onClickOnPrevMonth = this.onClickOnPrevMonth.bind(this);\n    this.onClickOnNextMonth = this.onClickOnNextMonth.bind(this);\n    this.onSelectDay = this.onSelectDay.bind(this);\n    this.setShowDailyTradesModal = this.setShowDailyTradesModal.bind(this);\n    this.setShowAddNewTradeFormModal = this.setShowAddNewTradeFormModal.bind(this);\n  }\n\n  // getTradesByMonthAndYear = async (props) => {\n  //   const { user, activeDate } = props;\n  //   const { uid } = user || {};\n  //   const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n  //   const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n  \n  //   const fetchedAllTrades = await fetchAllTradesByUserId(uid);\n  //   const filteredTradesByMonthAndYear = filterTradesByMonthAndYear(\n  //     fetchedAllTrades,\n  //     activeMonth,\n  //     activeYear,\n  //   );\n  //   console.log({ fetchedAllTrades, filteredTradesByMonthAndYear });\n  //   props.setState(() => {\n  //     return { tradeLogs: filteredTradesByMonthAndYear }; \n  //   });\n  // }\n\n  // async fetchActiveMonthTradeLogs() {\n  //   const { activeDate, user } = this.state;\n  //   const userId = user?.uid || {};\n\n  //   const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n  //   const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n    \n  //   // const fetchedAllTrades = await fetchAllTradesByUserId(userId);\n  //   // const filteredTradesByMonthAndYear = filterTradesByMonthAndYear(\n  //   //   fetchedAllTrades,\n  //   //   activeMonth,\n  //   //   activeYear,\n  //   // );\n  //   // console.log({ fetchedAllTrades, filteredTradesByMonthAndYear });\n  //   // props.setState(() => {\n  //   //   return { tradeLogs: filteredTradesByMonthAndYear }; \n  //   // });\n  // }\n \n  componentDidMount() {\n    // this.fetchActiveMonthTradeLogs();\n  }\n\n  onClickOnPrevMonth = () => {\n    const { activeDate } = this.state;\n    console.log('click on prev month detected...');\n    const firstOfPrevMonth = getPrevMonthFromDate(activeDate);\n    this.setState({ activeDate: firstOfPrevMonth });\n  }\n\n  onClickOnNextMonth = () => {\n    const { activeDate } = this.state;\n    console.log('click on next month detected...');\n    const firstOfNextMonth = getNextMonthFromDate(activeDate);\n    this.setState({ activeDate: firstOfNextMonth });\n  }\n\n  setShowDailyTradesModal(status = false) {\n    this.setState({ showDailyTradesModal: status })\n  }\n\n  setShowAddNewTradeFormModal(status = false) {\n    this.setState({ showAddNewTradeFormModal: status })\n  }\n\n  onSelectDay({ month, date, year }) {\n    this.setState({ activeDate: new Date(`${month} ${date}, ${year}`) });\n    this.setShowDailyTradesModal(true);\n  }\n\n  render() {\n    const { allTradeLogs } = this.props;\n    const { activeDate, showDailyTradesModal, showAddNewTradeFormModal } = this.state;\n\n    const activeDateDate = getDateFromDate(activeDate).toString();  // i.e., \"February\"\n    const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n    const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n    \n    const activeTradeLogs = filterTradesByMonthAndYear(\n      allTradeLogs, \n      activeMonth, \n      activeYear\n    );\n\n    const { gains, losses, profit } = getStatsFromTrades(activeTradeLogs);\n\n    console.log({ activeTradeLogs, gains, losses, profit });\n    \n    return (\n      <article className=\"MonthlyCalendar\">\n        <header className=\"flex py-2 px-2 justify-between items-center flex-wrap\">\n          <MonthNavigator\n            prevMonth={getMonthFromDate(getPrevMonthFromDate(activeDate))}\n            nextMonth={getMonthFromDate(getNextMonthFromDate(activeDate))}\n            onClickOnPrevMonth={this.onClickOnPrevMonth}\n            onClickOnNextMonth={this.onClickOnNextMonth}\n          />\n          <h1 className=\"active-date sm:text-3xl text-2xl font-medium title-font text-gray-900 text-center\"> {activeMonth} {activeDateDate}, {activeYear} </h1>\n          <MonthlyStats\n            gains={gains}\n            losses={losses}\n            profit={profit}\n          />\n        </header>\n        \n        <section>\n          <MonthlyCalendarGrid \n            {...this.state} \n            activeDateDate={activeDateDate}\n            activeMonth={activeMonth}\n            activeYear={activeYear}\n            activeTradeLogs={activeTradeLogs} \n            onSelectDay={this.onSelectDay}\n          />\n        </section>\n\n        <AddNewTradeBtn onClick={() => this.setShowAddNewTradeFormModal(true)} />\n\n        {showDailyTradesModal && (\n          <DailyTradesModal\n            activeDateDate={activeDateDate}\n            activeMonth={activeMonth}\n            activeYear={activeYear}\n            activeTradeLogs={activeTradeLogs}\n            onClose={() => this.setShowDailyTradesModal(false)}\n          />\n        )}\n\n        {showAddNewTradeFormModal && (\n          <AddNewTradeFormModal\n            activeDateDate={activeDateDate}\n            activeMonth={activeMonth}\n            activeYear={activeYear}\n            // activeTradeLogs={activeTradeLogs}\n            onClose={() => this.setShowAddNewTradeFormModal(false)}\n          />\n        )}\n\n      </article>\n    )\n  }\n}\n\nexport default MonthlyCalendar;","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArgNoY7luYCUYJlVAxapXEjw2nuDu5Ny8\",\n  authDomain: \"log-trade-dev.firebaseapp.com\",\n  projectId: \"log-trade-dev\",\n  storageBucket: \"log-trade-dev.appspot.com\",\n  messagingSenderId: \"427284527632\",\n  appId: \"1:427284527632:web:9232621b47da1f73dca895\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);","import React, { Component } from 'react';\nimport { AiOutlineArrowLeft, AiOutlineArrowRight } from \"react-icons/ai\";\nimport './App.css';\nimport MonthlyCalendar from './MonthlyCalendar/MonthlyCalendar';\nimport { getUserFromLocalStorage, getTickersFromTrades, getTotalProfitFromTrades } from './utils';\nimport { fetchAllTradesByUserId } from './vendors/firebase/firebase.firestore';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: getUserFromLocalStorage(),\n      allTradeLogs: [],\n    }\n  }\n\n  async componentDidMount() {\n    const { user } = this.state;\n    \n    if (!user || user === null) return;\n\n    const { uid: userId } = user || {};\n\n    // const fetchedTradeLogs = await fetchAllTradesByUserId('H8XTiCvnxOWojohm2DewzlBxrjG2');\n    \n    this.setState({ \n      allTradeLogs: [\n        {\n          closingPrice: \"8.00\",\n          date: \"12\",\n          month: \"October\",\n          notes: \"\",\n          numberOfShares: 2,\n          openingPrice: \"10.00\",\n          stopLoss: \"9.00\",\n          takeProfit: \"15.00\",\n          ticker: \"LOL\",\n          tradeId: \"sd7f7f8d57fd\",\n          year: \"2021\",\n          tradeType: 'long',\n        },\n        {\n          closingPrice: \"12.00\",\n          date: \"14\",\n          month: \"October\",\n          notes: \"\",\n          numberOfShares: 2,\n          openingPrice: \"10.00\",\n          stopLoss: \"9.00\",\n          takeProfit: \"15.00\",\n          ticker: \"GOOGL\",\n          tradeId: \"g76df7dg76fg6\",\n          year: \"2021\",\n          tradeType: 'long',\n        },\n        {\n          closingPrice: \"8.00\",\n          date: \"14\",\n          month: \"October\",\n          notes: \"\",\n          numberOfShares: 2,\n          openingPrice: \"10.00\",\n          stopLoss: \"9.00\",\n          takeProfit: \"15.00\",\n          ticker: \"GOOGL\",\n          tradeId: \"df678d867fg\",\n          year: \"2021\",\n          tradeType: 'long',\n        }\n      ],\n      // allTradeLogs: fetchedTradeLogs \n    });\n  }\n\n  render() {\n    console.log({ props: this.props, state: this.state });\n    return (\n      <div className=\"App Dashboard\">\n        <MonthlyCalendar {...this.props} {...this.state} />\n      </div>\n    ); \n  }\n}\n\nexport default App;\n\n\n\n\n// const Day = (props) => {\n//   const { \n//     isVoidDay = false, \n//     month = 'October', \n//     date = '10', \n//     year = '2021', \n//     trades = [], \n//     isActiveDay = false,\n//   } = props;\n\n//   const totalProfit = getTotalProfitFromTrades(trades);\n//   const tickers = getTickersFromTrades(trades);\n//   const numberOfTrades = trades?.length || 0;\n//   const isTotalProfitNegative = totalProfit < 0;\n\n//   console.log({ date, totalProfit, tickers, numberOfTrades });\n\n//   if (isVoidDay) {\n//     return (\n//       <div className={`Day ${isVoidDay ? 'void' : ''}`}></div>\n//     );\n//   }\n\n//   return (\n//     <div \n//       className={`\n//         Day p-1 \n//         ${!isVoidDay ? 'date' : ''} \n//         ${numberOfTrades < 0 ? 'bg-light text-black' : ''} \n//         ${numberOfTrades && isTotalProfitNegative ? 'bg-danger text-white' : ''} \n//         ${numberOfTrades && !isTotalProfitNegative \n//           ? 'bg-success text-white' : ''} \n//         ${isActiveDay ? 'border border-warning border-4' : ''}\n//       `} \n//       id={`${month}-${date}-${year}`}\n//     >\n\n//       <span className=\"date-label\">{date}</span>\n\n//       {numberOfTrades > 0 \n//         ? (\n//           <div className=\"daily-stat p-2\">\n//             {!!totalProfit ? (\n//               <p className=\"profit mt-1 mb-1 border-bottom border-light\">\n//                 <span className=\"label\">Profit</span>\n//                 <span className=\"value\">{totalProfit}</span>\n//               </p>\n//             ) : ''}\n//             {!!numberOfTrades ? (\n//               <p className=\"number-of-trades mt-1 mb-1 border-bottom border-light\">\n//                 <span className=\"label\"># Trades</span>\n//                 <span className=\"value\">{numberOfTrades}</span>\n//               </p>\n//             ) : null}\n//             {!!tickers ? (\n//               <p className=\"tickers mt-1 mb-1\">\n//                 <span className=\"value\">{tickers}</span>\n//               </p>\n//             ) : null}\n//           </div>\n//         ) : null\n//       }\n//     </div>\n//   );\n// };\n\n","import './firebase';\nimport { getFirestore, doc, getDoc, setDoc, updateDoc, arrayUnion } from \"firebase/firestore\"\n// import { getDocFromCache, saveDocInCache } from \"./firebase.cache\";\n\nconst db = getFirestore();\n\n// const fakeDB = {\n//   trades: [\n//     {\n//       closingPrice: \"11.50\",\n//       date: \"1\",\n//       month: \"October\",\n//       name: \"Cellect Biotechnology\",\n//       notes: \"Awesome win today!\",\n//       numberOfShares: 2,\n//       openingPrice: \"10.50\",\n//       stopLoss: \"9.00\",\n//       takeProfit: \"12.00\",\n//       ticker: \"APOPA\",\n//       tradeType: \"long\",\n//       year: \"2021\",\n//       tradeId: 'xwtr34535',\n//     },\n//     {\n//       closingPrice: \"15.00\",\n//       date: \"2\",\n//       month: \"October\",\n//       name: \"Atlantic American\",\n//       notes: \"Nice!\",\n//       numberOfShares: 3,\n//       openingPrice: \"10.00\",\n//       stopLoss: \"9.00\",\n//       takeProfit: \"20.00\",\n//       ticker: \"AAME\",\n//       year: \"2021\",\n//       tradeId: '74t6e657',\n//     },\n//     {\n//       closingPrice: \"43543543.00\",\n//       date: \"8\",\n//       month: \"October\",\n//       name: \"Aeglea Biotherapeutics\",\n//       notes: \"3453455\",\n//       numberOfShares: 3,\n//       openingPrice: \"4353.00\",\n//       stopLoss: \"54543.00\",\n//       takeProfit: \"4534.00\",\n//       ticker: \"AGLE\",\n//       year: \"2021\",\n//       tradeId: 'xn73i434x',\n//     },\n//     {\n//       closingPrice: \"15.00\",\n//       date: \"2\",\n//       month: \"October\",\n//       name: \"Tesla\",\n//       notes: \"Cool!\",\n//       numberOfShares: 10,\n//       openingPrice: \"17.00\",\n//       stopLoss: \"7.00\",\n//       takeProfit: \"18.00\",\n//       ticker: \"TSLA\",\n//       year: \"2021\",\n//       tradeId: 'x4w56wx54',\n//     }\n//   ],\n//   userId: '51XeDcMHQzYfB3clHKZZnnp87uq2',\n// }\n\n// export const fetchAllTradesByUserId = async (userId) => {\n//   if (!userId || typeof userId !== 'string') {\n//     throw new Error('Please pass in a user id to get stocks');\n//   }\n\n//   // fake API data\n//   const userTrades = {\n//     exists: () => true,\n//     data: () => (fakeDB)\n//   };\n\n//   // const userTrades = await getDoc(doc(db, \"tradelogs\", userId));\n\n//   if (userTrades?.exists()) {\n//     return userTrades?.data()?.trades;\n//   } \n//   return [];\n// } \n\n// export const createNewTradeLog = async (newTrade, userId) => {\n//   const tradelogRef = doc(db, \"tradelogs\", userId)\n//   const tradelogSnap = await getDoc(tradelogRef) ;\n\n//   if (tradelogSnap.exists()) {\n//     // update existing document by adding new trade to trades list\n//     try {\n//       await updateDoc(tradelogRef, {\n//         trades: arrayUnion({ ...newTrade }),\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   } else {\n//     // set up a new document and add new trade to trades list\n//     try {\n//       await setDoc(doc(db, \"tradelogs\", userId), {\n//         trades: [{ ...newTrade }],\n//         userId,\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   }\n// }\n\n// tradelogs stringified\n\nexport const stringify = json => {\n  const isJSONObject = typeof json === 'object' && json !== null;\n  if (!isJSONObject) {\n    throw new Error('Please pass in a valid JSON object to stringify');\n  }\n  return JSON.stringify(json);\n}\n\nexport const jsonify = stringified => {\n  if (!stringified \n    || !stringified.length \n    || typeof stringified !== 'string'\n  ) {\n    throw new Error('Please pass in a valid stringified JSON to parse');\n  }\n  try {\n    const jsonified = JSON.parse(stringified);\n    return jsonified;\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\n// const getUserDoc = async (\n//   userId, \n//   options = { \n//     useCache: false, \n//     cacheDurationInMinutes: 1,\n//   },\n// ) => {\n//   // flags\n//   const useCache = options.useCache || false;\n//   const cacheDurationInMinutes = options.cacheDurationInMinutes || 1;\n\n//   console.log({ ...options });\n//   if (!userId || typeof userId !== 'string') {\n//     throw new Error('Please pass in a user id to get document');\n//   }\n\n//   const getUserDocFromFirestore = async (userId) => {\n//     const userDoc = await getDoc(doc(db, \"tradelogs-stringified\", userId));\n//     return { \n//       exists: userDoc?.exists(),\n//       data: userDoc?.data(),\n//     };\n//   }\n\n//   const getUserDocFromCache = async (userId) => {\n//     const { exists, data, expiration } = await getDocFromCache(userId);\n//     return { \n//       exists, \n//       data, \n//       expiration \n//     }; \n//   }\n\n//   if (!useCache) {\n//     console.log(\n//       `useCache [${useCache}]... getting user doc from firebase DB`\n//     );\n//     const { exists, data } = await getUserDocFromFirestore(userId); \n//     if (exists) {\n//       saveDocInCache(\n//         userId, \n//         stringify(data), \n//         cacheDurationInMinutes\n//       );\n//     }\n//     return { exists, data };\n//   }\n  \n//   if (useCache) {\n//     const { exists, data, expiration } = await getUserDocFromCache(userId);\n//     const isCacheExpired = expiration !== null && new Date().getTime() > expiration;\n\n//     console.log({ exists, data, expiration, isCacheExpired, currentTime: new Date().getTime() });\n\n//     if (!exists || isCacheExpired) {\n//       console.log(\n//         `useCache [${useCache}], but cache either doesn't have doc OR is expired... getting user doc from firebase DB`\n//       );\n//       const { exists, data } = await getUserDocFromFirestore(userId); \n//       if (exists) {\n//         saveDocInCache(\n//           userId, \n//           stringify(data), \n//           cacheDurationInMinutes\n//         );\n//       }\n//       return { exists, data };\n//     }\n\n//     console.log(\n//       `useCache [${useCache}]... getting user doc from cache`\n//     );\n//     return { exists, data };\n//   }\n// }\n\n// export const fetchAllTradesByUserId = async (\n//   userId, \n//   options = { useCache: true, cacheDurationInMinutes: 0.15 },\n// ) => {\n//   if (!userId || typeof userId !== 'string') {\n//     throw new Error('Please pass in a user id to get stocks');\n//   }\n\n//   // fake API data\n//   // const userTrades = {\n//   //   exists: () => true,\n//   //   data: () => (fakeDB)\n//   // };\n\n//   const { exists, data } = await getUserDoc(userId, options);\n\n//   if (!exists) {\n//     console.info(`No document found for user [${userId}]`);\n//     return [];\n//   };\n\n//   // const data = userDoc?.data();\n//   console.log({ data });\n//   // saveDocInCache(userId, data);\n//   const content = jsonify(data?.content || '');\n//   const trades = content?.trades;\n//   console.log({ trades });\n//   return trades;\n\n//   // check cache for existing doc\n//   // const userDocCache = getDocFromCache(userId);\n//   // if cache, serve from there\n//   // if (userDocCache !== null) {\n//   //   console.log('serving user doc from cache...');\n//   //   const content = jsonify(userDocCache.content || '');\n//   //   const trades = content?.trades;\n//   //   console.log({ trades });\n//   //   return trades;\n//   // } else {\n//   //   console.log('serving user doc from DB...');\n//   //   // else get from DB\n//   //   // save fetched doc from DB in cache for later ref\n//   //   const userDoc = await getDoc(doc(db, \"tradelogs-stringified\", userId));\n\n//   //   if (!userDoc?.exists()) return [];\n\n//   //   const data = userDoc?.data();\n//   //   saveDocInCache(userId, data);\n//   //   const content = jsonify(data?.content || '');\n//   //   const trades = content?.trades;\n//   //   console.log({ trades });\n//   //   return trades;\n//   // }\n// } \n\n// export const createNewTradeLog = async (newTrade, userId) => {\n//   const tradelogRef = doc(db, \"tradelogs-stringified\", userId)\n//   const tradelogSnap = await getDoc(tradelogRef) ;\n\n//   if (tradelogSnap.exists()) {\n//     // update existing document by adding new trade to trades list\n//     try {\n//       await updateDoc(tradelogRef, {\n//         trades: arrayUnion({ ...newTrade }),\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   } else {\n//     // set up a new document and add new trade to trades list\n//     try {\n//       await setDoc(doc(db, \"tradelogs\", userId), {\n//         trades: [{ ...newTrade }],\n//         userId,\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   }\n// }\n\nconst getTradeLogsDocById = async (docId) => {\n  if (!docId || typeof docId !== 'string') {\n    throw new Error(\n      'Please pass in a valid doc id to fetch document from Firestore'\n    );\n  }\n  return await getDoc(doc(db, \"tradelogs-stringified\", docId));\n}\n\nexport const fetchAllTradesByUserId = async (userId) => {\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to get trade logs');\n  }\n\n  const userTradeLogsDoc = await getTradeLogsDocById(userId);\n\n  if (!userTradeLogsDoc?.exists()) {\n    console.info(\n      `No trade logs found for user id - [${userId}]. Returning empty array set`\n    );\n    return [];\n  } \n\n  const userTrades = \n    jsonify(userTradeLogsDoc?.data()?.content || {}).trades || [];\n\n  console.log({ userTrades });\n\n  return userTrades;\n} \n\nexport const createNewTradeLog = async (newTrade, userId) => {\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to create a new trade log');\n  }\n\n  const validateNewTrade = (newTrade) => {\n    if (!newTrade || typeof newTrade !== 'object') {\n      throw new Error('Please pass in a valid new trade object');\n    }\n    const requiredProperties = [\n      'tradeId',\n      'openingPrice',\n      'closingPrice',\n      'stopLoss',\n      'takeProfit',\n      'date',\n      'month',\n      'year',\n      'notes',\n      'numberOfShares',\n      'ticker',\n    ]\n    const missingProperty = requiredProperties.find(property => {\n      return !newTrade.hasOwnProperty(property)\n    });\n\n    if (missingProperty) {\n      return { \n        isValid: false, \n        error: `[${missingProperty}] property is required to create a new trade` \n      }\n    }\n    return { isValid: true, error: null };\n  }\n\n  const { isValid, error } = validateNewTrade(newTrade);\n\n  if (!isValid) {\n    throw new Error(error);\n  }\n\n  const userTradeLogsRef = doc(db, \"tradelogs-stringified\", userId)\n  const userTradeLogsSnap = await getDoc(userTradeLogsRef) ;\n\n  if (userTradeLogsSnap.exists()) {\n    // update existing document by adding new trade to trades list\n    const { content } = userTradeLogsSnap.data() || {};\n    const existingData = jsonify(content);\n    const { userId, trades = [] } = existingData;\n    const newData = {\n      trades: [\n        ...trades,\n        { ...newTrade },\n      ],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await updateDoc(userTradeLogsRef, {\n        content: newDataStringified,\n      });\n      return { isNewTradeLogCreated: true };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to create new trade at the moment. Try again later.' \n      }\n    }\n  } else {\n    // set up a new document and add new trade to trades list\n    const newData = {\n      trades: [{ ...newTrade }],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await setDoc(doc(db, \"tradelogs-stringified\", userId), {\n        content: newDataStringified,\n      });\n      return { isNewTradeCreated: true };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to create new trade at the moment. Try again later.' \n      }\n    }\n  }\n}\n\nexport const deleteTradeLog = async (tradeLogId, userId) => {\n  if (!tradeLogId || typeof tradeLogId !== 'string') {\n    throw new Error('Please pass in a valid trade log id to delete');\n  }\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to delete a trade log');\n  }\n\n  const userTradeLogsRef = doc(db, \"tradelogs-stringified\", userId)\n  const userTradeLogsSnap = await getDoc(userTradeLogsRef);\n\n  if (userTradeLogsSnap.exists()) {\n    // update existing trade logs list by removing matching trade id\n    const { content } = userTradeLogsSnap.data() || {};\n    const existingData = jsonify(content);\n    const { userId, trades = [] } = existingData;\n    const filteredTrades = trades.filter(trade => trade.tradeId !== tradeLogId);\n    const newData = {\n      trades: [...filteredTrades],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await updateDoc(userTradeLogsRef, {\n        content: newDataStringified,\n      });\n      return { isTradeLogDeleted: true, deletedTradeLogId: tradeLogId };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to delete trade log at the moment. Try again later.' \n      }\n    }\n  }\n}\n\nexport const updateTradeLog = async (tradeLogId, updatedTradeLog, userId) => {\n  if (!tradeLogId || typeof tradeLogId !== 'string') {\n    throw new Error('Please pass in a valid trade log id to delete');\n  }\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to delete a trade log');\n  }\n\n  \n  const validateNewTrade = (updatedTrade) => {\n    if (!updatedTrade || typeof updatedTrade !== 'object') {\n      throw new Error('Please pass in a valid updated trade object');\n    }\n    const requiredProperties = [\n      'tradeId',\n      'openingPrice',\n      'closingPrice',\n      'stopLoss',\n      'takeProfit',\n      'date',\n      'month',\n      'year',\n      'notes',\n      'numberOfShares',\n      'ticker',\n    ]\n    const missingProperty = requiredProperties.find(property => {\n      return !updatedTrade.hasOwnProperty(property)\n    });\n\n    if (missingProperty) {\n      return { \n        isValid: false, \n        error: `[${missingProperty}] property is required to update a trade` \n      }\n    }\n    return { isValid: true, error: null };\n  }\n\n  const { isValid, error } = validateNewTrade(updatedTradeLog);\n\n  if (!isValid) {\n    throw new Error(error);\n  }\n\n  const userTradeLogsRef = doc(db, \"tradelogs-stringified\", userId)\n  const userTradeLogsSnap = await getDoc(userTradeLogsRef);\n\n  if (userTradeLogsSnap.exists()) {\n    // update existing trade logs list by removing matching trade id\n    const { content } = userTradeLogsSnap.data() || {};\n    const existingData = jsonify(content);\n    const { userId, trades = [] } = existingData;\n    const updatedTrades = trades.map((trade) => {\n      if (trade.tradeId === tradeLogId) {\n        return { ...updatedTradeLog };\n      }\n      return trade;\n    });\n    const newData = {\n      trades: [...updatedTrades],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await updateDoc(userTradeLogsRef, {\n        content: newDataStringified,\n      });\n      return { isTradeLogUpdated: true, updatedTradeLogId: tradeLogId };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to delete trade log at the moment. Try again later.' \n      }\n    }\n  }\n}\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createNewTradeLog, deleteTradeLog, fetchAllTradesByUserId, updateTradeLog } from './vendors/firebase/firebase.firestore';\n// import reportWebVitals from './reportWebVitals';\n\n// const userId = 'H8XTiCvnxOWojohm2DewzlBxrjG2';\n// const newTradeLog = {\n//   tradeId: 'sd7f7f8d57fd',\n//   closingPrice: '15.00',\n//   openingPrice: '10.00',\n//   stopLoss: '9.00',\n//   takeProfit: '15.00',\n//   date: '13',\n//   month: 'October',\n//   year: '2021',\n//   notes: '',\n//   numberOfShares: 2,\n//   ticker: 'GOOGL',\n// };\n// const updatedTradeLog = {\n//   tradeId: 'sd7f7f8d57fd',\n//   closingPrice: '15.00',\n//   openingPrice: '10.00',\n//   stopLoss: '9.00',\n//   takeProfit: '15.00',\n//   date: '13',\n//   month: 'October',\n//   year: '2021',\n//   notes: '',\n//   numberOfShares: 2,\n//   ticker: 'LOL',\n// };\n// const tradeLogId = 'sd7f7f8d57fd';\n\n\n// fetchAllTradesByUserId('H8XTiCvnxOWojohm2DewzlBxrjG2');\n// createNewTradeLog(newTradeLog, userId);\n// deleteTradeLog(tradeLogId, userId);\n// updateTradeLog(tradeLogId, updatedTradeLog, userId);\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}