{"version":3,"sources":["utils/index.js","MonthlyCalendar/DayLabels.js","MonthlyCalendar/Day.js","MonthlyCalendar/DaysGrid.js","MonthlyCalendar/MonthCalendarGrid.js","MonthlyCalendar/MonthlyStats.js","MonthlyCalendar/MonthNavigator.js","MonthlyCalendar/MonthlyCalendar.js","App.js","index.js"],"names":["getUserFromLocalStorage","userStringified","localStorage","getItem","JSON","parse","getMonthFromDate","date","Error","monthIndex","getMonth","getYearFromDate","getFullYear","DayLabels","props","className","Day","DaysGrid","id","MonthlyCalendarGrid","MonthlyStats","MonthNavigator","prevMonth","nextMonth","type","MonthlyCalendar","state","todayDate","Date","activeDate","activeMonthTradeLogs","fetchActiveMonthTradeLogs","bind","a","this","user","uid","toString","Component","App","allTradeLogs","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01e68bfd.chunk.js","sourcesContent":["export const getTotalProfitFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return '0.00';\n  return trades\n    // extract each trade properties to calculate total profit\n    .map(trade => ({ \n      tradeType: trade.tradeType, \n      openingPrice: parseFloat(trade.openingPrice).toFixed(2),\n      closingPrice: parseFloat(trade.closingPrice).toFixed(2),\n      numberOfShares: parseInt(trade.numberOfShares),\n    }))\n    // calculate each trade profit by trade type\n    .map((trade) => {\n      // on short trade, opening price > closing price\n      if (trade.tradeType === 'short') {\n        return (trade.openingPrice - trade.closingPrice) * trade.numberOfShares;\n      }\n      // on long trade, closing price > opening price\n      return (trade.closingPrice - trade.openingPrice) * trade.numberOfShares;\n    }) \n    // adds up all the trade profits together\n    .reduce((totalProfit, eachTradeProfit) => {\n      return totalProfit + (eachTradeProfit);\n    }, 0)\n    .toFixed(2);\n}\n\nexport const getTickersFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return '';\n  return trades\n    .map(trade => trade.ticker)\n    .join(', ');\n}\n\nexport const getUserFromLocalStorage = () => {\n  const userStringified = localStorage.getItem('logtrade:::user');\n  if (userStringified === null) return null;\n  return JSON.parse(userStringified);\n}\n\nexport const getMonthFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n\n  const MONTHS_FULL= [\n    \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n    \"August\",\"September\",\"October\",\"November\",\"December\"\n  ];\n\n  const monthIndex = date.getMonth();\n\n  if (monthIndex < 0 || monthIndex > 11) {\n    throw new Error(\n      'Invalid month detected, check to ensure valid date is passed'\n    );\n  }\n\n  return MONTHS_FULL[monthIndex];\n}\n\nexport const getDateFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  return date.getDate();\n}\n\nexport const getYearFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  return date.getFullYear();\n}\n\nexport const getDayFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  const DAYS = [\n    'Sunday', 'Monday', 'Tuesday', 'Wednesday', \n    'Thursday', 'Friday', 'Saturday'\n  ];\n\n  const dayIndex = date.getDay();\n\n  if (dayIndex < 0 || dayIndex > 6) {\n    throw new Error(\n      'Invalid day detected, check to ensure valid date is passed'\n    );\n  }\n\n  return DAYS[dayIndex];\n}\n\nexport const getNumberOfDaysInMonth = (month, year) => {\n  return new Date(year, month + 1, 0).getDate();\n};\n\n/**\n * Given a date, returns date of previous month. Note: the default date \n * if previous month is set to 1 by default\n * @param {Date} date - a Date object\n * @returns {Date} - a Date object\n */\nexport const getPrevMonthFromDate = (date) => {\n  if (!date || !(date instanceof Date)) {\n    throw new Error(\n      'Please pass in a `Date` object to generate previous month'\n    );\n  }\n  const x = new Date(date);\n  x.setDate(1);\n  x.setMonth(x.getMonth() - 1);\n  return x;\n}\n\n/**\n * Given a date, returns date of next month. Note: the default date \n * if previous month is set to 1 by default\n * @param {Date} date - a Date object\n * @returns {Date} - a Date object\n */\n export const getNextMonthFromDate = (date) => {\n  if (!date || !(date instanceof Date)) {\n    throw new Error('Please pass in a `Date` object to generate next month');\n  }\n  const x = new Date(date);\n  x.setDate(1);\n  x.setMonth(x.getMonth() + 1);\n  return x;\n}\n\nexport const addMinutesToDate = (date = new Date(), minutesToAdd = 0) => {  \n  const currentDate = new Date();\n  const futureDate = new Date(currentDate.getTime() + (minutesToAdd * 60000));\n  return futureDate.getTime();\n}","const DayLabels = props => {\n  return (\n    <div className=\"DayLabels day-labels\">\n      <p className=\"day\">Sunday</p>\n      <p className=\"day\">Monday</p>\n      <p className=\"day\">Tuesday</p>\n      <p className=\"day\">Wednesday</p>\n      <p className=\"day\">Thursday</p>\n      <p className=\"day\">Friday</p>\n      <p className=\"day\">Saturday</p>\n    </div>\n  )\n}\n\nexport default DayLabels;","const Day = props => {\n  return (\n    <div className=\"Day\">\n      <p className=\"date\">15</p>\n    </div>\n  )\n}\n\nexport default Day;\n","import Day from \"./Day\";\n\nconst DaysGrid = (props) => {\n  const { date } = props;\n  return (\n    <div className=\"DaysGrid month-grid\" id=\"month-grid\">\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n    </div>\n  );\n}\n\nexport default DaysGrid;","import DayLabels from \"./DayLabels\";\nimport DaysGrid from \"./DaysGrid\";\n\nconst MonthlyCalendarGrid = (props) => {\n  return (\n    <section className=\"MonthlyCalendarGrid my-2\">\n      <DayLabels />\n      <DaysGrid />\n    </section>\n  )\n}\n\nexport default MonthlyCalendarGrid;","const MonthlyStats = props => {\n  return (\n    <div className=\"MonthlyStats monthly-stats flex\">\n      <p className=\"gains my-1\">\n        <sub className=\"text-gray-400\">Gains: </sub> \n        <span className=\"text-green-900 title-font sm:text-4xl text-3xl font-medium\"> $254 </span>\n      </p>\n      <p className=\"losses text-red-900 my-1 ml-2\">\n        <sub className=\"text-gray-400\">Losses: </sub> \n        <span className=\"text-red-900 title-font sm:text-4xl text-3xl font-medium\"> $100 </span>\n      </p>\n      <p className=\"p-l text-gray-900 my-1 ml-2\">\n        <sub className=\"text-gray-400\">P/L: </sub> \n        <span className=\"text-gray-500 title-font sm:text-4xl text-3xl font-medium\"> $154 </span> \n      </p>\n    </div>\n  )\n}\n\nexport default MonthlyStats;","import { AiOutlineArrowLeft, AiOutlineArrowRight } from \"react-icons/ai\";\n\nconst MonthNavigator = (props = {}) => {\n  const { \n    prevMonth = 'October', \n    nextMonth = 'December', \n  } = props;\n  \n  if (!prevMonth || !nextMonth) return ``;\n\n  return (\n    <div className=\"MonthNavigator flex items-center\">\n      <button type=\"button\" className=\"inline-flex items-center justify-center px-2 py-1 border border-transparent text-base font-small text-white bg-indigo-600 hover:bg-indigo-700\">\n        <AiOutlineArrowLeft className=\"mr-1\" /> {prevMonth}\n      </button>\n\n      <button type=\"button\" className=\"inline-flex items-center justify-center px-2 py-1 ml-1 border border-transparent text-base font-small text-white bg-indigo-600 hover:bg-indigo-700\">\n        {nextMonth} <AiOutlineArrowRight className=\"ml-1\" />\n      </button>\n    </div>\n  );\n};\n\nexport default MonthNavigator;","import React, { Component } from \"react\";\nimport { getMonthFromDate, getYearFromDate } from \"../utils\";\nimport MonthlyCalendarGrid from \"./MonthCalendarGrid\";\nimport MonthlyStats from \"./MonthlyStats\";\nimport MonthNavigator from \"./MonthNavigator\";\n\nclass MonthlyCalendar extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      todayDate: new Date(),\n      activeDate: new Date(),\n      activeMonthTradeLogs: [],\n    }\n\n    this.fetchActiveMonthTradeLogs = this.fetchActiveMonthTradeLogs.bind(this);\n  }\n\n  // getTradesByMonthAndYear = async (props) => {\n  //   const { user, activeDate } = props;\n  //   const { uid } = user || {};\n  //   const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n  //   const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n  \n  //   const fetchedAllTrades = await fetchAllTradesByUserId(uid);\n  //   const filteredTradesByMonthAndYear = filterTradesByMonthAndYear(\n  //     fetchedAllTrades,\n  //     activeMonth,\n  //     activeYear,\n  //   );\n  //   console.log({ fetchedAllTrades, filteredTradesByMonthAndYear });\n  //   props.setState(() => {\n  //     return { tradeLogs: filteredTradesByMonthAndYear }; \n  //   });\n  // }\n\n  async fetchActiveMonthTradeLogs() {\n    const { activeDate, user } = this.state;\n    const userId = user?.uid || {};\n\n    const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n    const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n    \n    // const fetchedAllTrades = await fetchAllTradesByUserId(userId);\n    // const filteredTradesByMonthAndYear = filterTradesByMonthAndYear(\n    //   fetchedAllTrades,\n    //   activeMonth,\n    //   activeYear,\n    // );\n    // console.log({ fetchedAllTrades, filteredTradesByMonthAndYear });\n    // props.setState(() => {\n    //   return { tradeLogs: filteredTradesByMonthAndYear }; \n    // });\n  }\n \n  componentDidMount() {\n    this.fetchActiveMonthTradeLogs();\n  }\n\n  render() {\n    return (\n      <article className=\"MonthlyCalendar\">\n        <header className=\"flex py-2 px-2 justify-between items-center flex-wrap\">\n          <MonthNavigator className=\"\" />\n          <h1 className=\"active-date sm:text-3xl text-2xl font-medium title-font text-gray-900 text-center\"> November 1, 2021 </h1>\n          <MonthlyStats />\n        </header>\n        \n        <section>\n          <MonthlyCalendarGrid />\n        </section>\n      </article>\n    )\n  }\n}\n\nexport default MonthlyCalendar;","import React, { Component } from 'react';\nimport { AiOutlineArrowLeft, AiOutlineArrowRight } from \"react-icons/ai\";\nimport './App.css';\nimport MonthlyCalendar from './MonthlyCalendar/MonthlyCalendar';\nimport { getUserFromLocalStorage, getTickersFromTrades, getTotalProfitFromTrades } from './utils';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: getUserFromLocalStorage(),\n      allTradeLogs: [],\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App Dashboard\">\n        <MonthlyCalendar {...this.props} {...this.state} />\n      </div>\n    ); \n  }\n}\n\nexport default App;\n\n\n\n\n// const Day = (props) => {\n//   const { \n//     isVoidDay = false, \n//     month = 'October', \n//     date = '10', \n//     year = '2021', \n//     trades = [], \n//     isActiveDay = false,\n//   } = props;\n\n//   const totalProfit = getTotalProfitFromTrades(trades);\n//   const tickers = getTickersFromTrades(trades);\n//   const numberOfTrades = trades?.length || 0;\n//   const isTotalProfitNegative = totalProfit < 0;\n\n//   console.log({ date, totalProfit, tickers, numberOfTrades });\n\n//   if (isVoidDay) {\n//     return (\n//       <div className={`Day ${isVoidDay ? 'void' : ''}`}></div>\n//     );\n//   }\n\n//   return (\n//     <div \n//       className={`\n//         Day p-1 \n//         ${!isVoidDay ? 'date' : ''} \n//         ${numberOfTrades < 0 ? 'bg-light text-black' : ''} \n//         ${numberOfTrades && isTotalProfitNegative ? 'bg-danger text-white' : ''} \n//         ${numberOfTrades && !isTotalProfitNegative \n//           ? 'bg-success text-white' : ''} \n//         ${isActiveDay ? 'border border-warning border-4' : ''}\n//       `} \n//       id={`${month}-${date}-${year}`}\n//     >\n\n//       <span className=\"date-label\">{date}</span>\n\n//       {numberOfTrades > 0 \n//         ? (\n//           <div className=\"daily-stat p-2\">\n//             {!!totalProfit ? (\n//               <p className=\"profit mt-1 mb-1 border-bottom border-light\">\n//                 <span className=\"label\">Profit</span>\n//                 <span className=\"value\">{totalProfit}</span>\n//               </p>\n//             ) : ''}\n//             {!!numberOfTrades ? (\n//               <p className=\"number-of-trades mt-1 mb-1 border-bottom border-light\">\n//                 <span className=\"label\"># Trades</span>\n//                 <span className=\"value\">{numberOfTrades}</span>\n//               </p>\n//             ) : null}\n//             {!!tickers ? (\n//               <p className=\"tickers mt-1 mb-1\">\n//                 <span className=\"value\">{tickers}</span>\n//               </p>\n//             ) : null}\n//           </div>\n//         ) : null\n//       }\n//     </div>\n//   );\n// };\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}