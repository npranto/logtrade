{"version":3,"sources":["utils/index.js","MonthlyCalendar/AddTradeBtn.js","MonthlyCalendar/DailyTradesModal.js","MonthlyCalendar/DayLabels.js","MonthlyCalendar/Day.js","MonthlyCalendar/DaysGrid.js","MonthlyCalendar/MonthCalendarGrid.js","MonthlyCalendar/MonthlyStats.js","MonthlyCalendar/MonthNavigator.js","MonthlyCalendar/MonthlyCalendar.js","vendors/firebase/firebase.js","App.js","vendors/firebase/firebase.firestore.js","index.js"],"names":["getUserFromLocalStorage","userStringified","localStorage","getItem","JSON","parse","getMonthFromDate","date","Error","monthIndex","getMonth","getDateFromDate","getDate","getYearFromDate","getFullYear","getPrevMonthFromDate","Date","x","setDate","setMonth","getNextMonthFromDate","AddTradeBtn","props","class","viewBox","fill","d","DailyTradesModal","role","id","className","stroke","type","DayLabels","Day","isVoidDay","month","year","trades","isActiveDay","onSelectDay","totalProfit","length","map","trade","tradeType","openingPrice","parseFloat","toFixed","closingPrice","numberOfShares","parseInt","reduce","eachTradeProfit","getTotalProfitFromTrades","tickers","ticker","join","getTickersFromTrades","numberOfTrades","isTotalProfitNegative","includes","onClick","DaysGrid","activeDate","activeMonth","activeDateDate","activeYear","activeTradeLogs","todayDate","numberOfDaysInMonth","firstOfMonth","indexOfFirstDayInMonth","getDay","numberOfDaysInGrid","daysInGrid","Array","keys","_","index","dayGrid","matchingTrades","isArray","filter","findMatchingTradesByDate","console","log","uniqid","MonthlyCalendarGrid","MonthlyStats","gains","losses","profit","MonthNavigator","prevMonth","nextMonth","onClickOnPrevMonth","onClickOnNextMonth","MonthlyCalendar","state","firstOfPrevMonth","setState","firstOfNextMonth","showActiveDateTradeLogs","bind","onAddNewTrade","setShowActiveDateTradeLogs","status","this","allTradeLogs","toString","filterTradesByMonthAndYear","stats","getStatsFromTrades","Component","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","getFirestore","user","a","uid","notes","stopLoss","takeProfit","tradeId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30c2e1b2.chunk.js","sourcesContent":["import uniqid from 'uniqid';\n\nexport const getStatsFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return {\n    gains: '0.00',\n    losses: '0.00',\n    profit: '0.00',\n  };\n  const stats = trades\n    // extract each trade properties to calculate total profit\n    .map(trade => ({ \n      tradeType: trade.tradeType, \n      openingPrice: parseFloat(trade.openingPrice).toFixed(2),\n      closingPrice: parseFloat(trade.closingPrice).toFixed(2),\n      numberOfShares: parseInt(trade.numberOfShares),\n    }))\n    // calculate each trade profit by trade type\n    .map((trade) => {\n      // on short trade, opening price > closing price\n      if (trade.tradeType === 'short') {\n        return (trade.openingPrice - trade.closingPrice) * trade.numberOfShares;\n      }\n      // on long trade, closing price > opening price\n      return (trade.closingPrice - trade.openingPrice) * trade.numberOfShares;\n    }) \n    // adds up all the trade profits together\n    .reduce((stats, eachTradeProfit) => {\n      if (eachTradeProfit > 0) {\n        stats.gains = stats.gains + eachTradeProfit;\n      }\n      if (eachTradeProfit < 0) {\n        stats.losses = stats.losses + eachTradeProfit;\n      }\n      stats.profit = stats.profit + eachTradeProfit;\n      return stats;\n    }, {\n      gains: 0.00,\n      losses: 0.00,\n      profit: 0.00,\n    });\n  return {\n    gains: parseFloat(stats.gains).toFixed(2),\n    losses: parseFloat(stats.losses).toFixed(2),\n    profit: parseFloat(stats.profit).toFixed(2),\n  }\n}\n\nexport const getTotalProfitFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return '0.00';\n  const totalProfit = trades\n    // extract each trade properties to calculate total profit\n    .map(trade => ({ \n      tradeType: trade.tradeType, \n      openingPrice: parseFloat(trade.openingPrice).toFixed(2),\n      closingPrice: parseFloat(trade.closingPrice).toFixed(2),\n      numberOfShares: parseInt(trade.numberOfShares),\n    }))\n    // calculate each trade profit by trade type\n    .map((trade) => {\n      // on short trade, opening price > closing price\n      if (trade.tradeType === 'short') {\n        return (trade.openingPrice - trade.closingPrice) * trade.numberOfShares;\n      }\n      // on long trade, closing price > opening price\n      return (trade.closingPrice - trade.openingPrice) * trade.numberOfShares;\n    }) \n    // adds up all the trade profits together\n    .reduce((totalProfit, eachTradeProfit) => {\n      return totalProfit + (eachTradeProfit);\n    }, 0)\n    .toFixed(2);\n  return parseFloat(totalProfit).toFixed(2);\n}\n\nexport const getTickersFromTrades = (trades = []) => {\n  if (trades === null || !trades.length) return '';\n  return trades\n    .map(trade => trade.ticker)\n    .join(', ');\n}\n\nexport const getUserFromLocalStorage = () => {\n  const userStringified = localStorage.getItem('logtrade:::user');\n  if (userStringified === null) return null;\n  return JSON.parse(userStringified);\n}\n\nexport const getMonthFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n\n  const MONTHS_FULL= [\n    \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n    \"August\",\"September\",\"October\",\"November\",\"December\"\n  ];\n\n  const monthIndex = date.getMonth();\n\n  if (monthIndex < 0 || monthIndex > 11) {\n    throw new Error(\n      'Invalid month detected, check to ensure valid date is passed'\n    );\n  }\n\n  return MONTHS_FULL[monthIndex];\n}\n\nexport const getDateFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  return date.getDate();\n}\n\nexport const getYearFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  return date.getFullYear();\n}\n\nexport const getDayFromDate = (date) => {\n  if (!date) {\n    throw new Error('Please pass in a date to get month name');\n  }\n  const DAYS = [\n    'Sunday', 'Monday', 'Tuesday', 'Wednesday', \n    'Thursday', 'Friday', 'Saturday'\n  ];\n\n  const dayIndex = date.getDay();\n\n  if (dayIndex < 0 || dayIndex > 6) {\n    throw new Error(\n      'Invalid day detected, check to ensure valid date is passed'\n    );\n  }\n\n  return DAYS[dayIndex];\n}\n\nexport const getNumberOfDaysInMonth = (month, year) => {\n  return new Date(year, month + 1, 0).getDate();\n};\n\n/**\n * Given a date, returns date of previous month. Note: the default date \n * if previous month is set to 1 by default\n * @param {Date} date - a Date object\n * @returns {Date} - a Date object\n */\nexport const getPrevMonthFromDate = (date) => {\n  if (!date || !(date instanceof Date)) {\n    throw new Error(\n      'Please pass in a `Date` object to generate previous month'\n    );\n  }\n  const x = new Date(date);\n  x.setDate(1);\n  x.setMonth(x.getMonth() - 1);\n  return x;\n}\n\n/**\n * Given a date, returns date of next month. Note: the default date \n * if previous month is set to 1 by default\n * @param {Date} date - a Date object\n * @returns {Date} - a Date object\n */\n export const getNextMonthFromDate = (date) => {\n  if (!date || !(date instanceof Date)) {\n    throw new Error('Please pass in a `Date` object to generate next month');\n  }\n  const x = new Date(date);\n  x.setDate(1);\n  x.setMonth(x.getMonth() + 1);\n  return x;\n}\n\nexport const addMinutesToDate = (date = new Date(), minutesToAdd = 0) => {  \n  const currentDate = new Date();\n  const futureDate = new Date(currentDate.getTime() + (minutesToAdd * 60000));\n  return futureDate.getTime();\n}\n\nexport const filterTradesByMonthAndYear = (trades = [], month, year) => {\n  return trades.filter(trade => trade.month === month && trade.year === year);\n}\n\nexport const findMatchingTradesByDate = (trades = [], month, date, year) => {\n  if (!trades.length || !Array.isArray(trades)) return;\n  return trades.filter(trade => (\n    (trade.month === month) && \n    (trade.date === date) &&\n    (trade.year === year)\n  ));\n}\n\nexport const getUniqueId = () => uniqid('logtrade-');\n","const AddTradeBtn = props => {\n  return (\n    <div class=\"AddTradeBtn fixed bottom-1 right-1 mr-2 mb-2\">\n      <button\n        class=\"text-white px-4 w-auto h-12 bg-red-600 rounded-full hover:bg-red-700 active:shadow-lg mouse shadow transition ease-in duration-200 focus:outline-none\">\n        <svg viewBox=\"0 0 20 20\" enable-background=\"new 0 0 20 20\" class=\"w-4 h-4 inline-block mr-1\">\n        <path fill=\"#FFFFFF\" d=\"M17.561,2.439c-1.442-1.443-2.525-1.227-2.525-1.227L8.984,7.264L2.21,14.037L1.2,18.799l4.763-1.01\n                                l6.774-6.771l6.052-6.052C18.788,4.966,19.005,3.883,17.561,2.439z M5.68,17.217l-1.624,0.35c-0.156-0.293-0.345-0.586-0.69-0.932\n                                c-0.346-0.346-0.639-0.533-0.932-0.691l0.35-1.623l0.47-0.469c0,0,0.883,0.018,1.881,1.016c0.997,0.996,1.016,1.881,1.016,1.881\n                                L5.68,17.217z\"/>\n      </svg>\n        <span>Add Trade</span>\n      </button>\n    </div>\n  )\n};\n\nexport default AddTradeBtn;","const DailyTradesModal = props => {\n  return (\n    <div class=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\n      <div class=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        {/* <!--\n          Background overlay, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0\"\n            To: \"opacity-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100\"\n            To: \"opacity-0\"\n        --> */}\n        <div class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" aria-hidden=\"true\"></div>\n\n        {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n        <span class=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n\n        {/* <!--\n          Modal panel, show/hide based on modal state.\n\n          Entering: \"ease-out duration-300\"\n            From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            To: \"opacity-100 translate-y-0 sm:scale-100\"\n          Leaving: \"ease-in duration-200\"\n            From: \"opacity-100 translate-y-0 sm:scale-100\"\n            To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        --> */}\n        <div class=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n          <div class=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n            <div class=\"sm:flex sm:items-start\">\n              <div class=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                {/* <div className=\"flex flex-wrap justify-between\"> */}\n                <h3 class=\"text-lg leading-6 font-medium text-gray-900\" id=\"modal-title\">\n                  Daily Trades\n                </h3>\n                <p className=\"text-sm text-gray-400\">November 2, 2021</p>\n                {/* </div> */}\n                <div class=\"mt-2\">\n\n\n\n\n\n                <div class=\"flex flex-wrap -m-4\">\n                  <div class=\"p-4 w-full\">\n                    <div class=\"h-full p-6 rounded-lg border-2 border-gray-300 flex flex-col relative overflow-hidden\">\n                      <h2 class=\"text-sm tracking-widest title-font mb-1 font-medium\">GOOGL</h2>\n                      \n                      \n                      <div class=\"flex flex-wrap -mx-4 mt-auto mb-auto content-start\">\n                        <div class=\"p-2 sm:w-1/2 lg:w-1/4 w-1/2\">\n                          <h2 class=\"title-font font-small text-xl text-gray-900 font-bold\">2.7K</h2>\n                          <p class=\"leading-relaxed text-gray-400\">Users</p>\n                        </div>\n                        <div class=\"p-2 sm:w-1/2 lg:w-1/4 w-1/2\">\n                          <h2 class=\"title-font font-small text-xl text-gray-900 font-bold\">1.8K</h2>\n                          <p class=\"leading-relaxed text-gray-400\">Subscribes</p>\n                        </div>\n                        <div class=\"p-2 sm:w-1/2 lg:w-1/4 w-1/2\">\n                          <h2 class=\"title-font font-small text-xl text-gray-900 font-bold\">35</h2>\n                          <p class=\"leading-relaxed text-gray-400\">Downloads</p>\n                        </div>\n                        <div class=\"p-2 sm:w-1/2 lg:w-1/4 w-1/2\">\n                          <h2 class=\"title-font font-small text-xl font-bold text-gray-900\">4</h2>\n                          <p class=\"leading-relaxed text-gray-400\">Products</p>\n                        </div>\n                      </div>\n\n                    </div>\n                  </div>\n                  <div class=\"p-4 xl:w-1/4 md:w-1/2 w-full\">\n                    <div class=\"h-full p-6 rounded-lg border-2 border-indigo-500 flex flex-col relative overflow-hidden\">\n                      <span class=\"bg-indigo-500 text-white px-3 py-1 tracking-widest text-xs absolute right-0 top-0 rounded-bl\">POPULAR</span>\n                      <h2 class=\"text-sm tracking-widest title-font mb-1 font-medium\">PRO</h2>\n                      <h1 class=\"text-5xl text-gray-900 leading-none flex items-center pb-4 mb-4 border-b border-gray-200\">\n                        <span>$38</span>\n                        <span class=\"text-lg ml-1 font-normal text-gray-500\">/mo</span>\n                      </h1>\n                      <p class=\"flex items-center text-gray-600 mb-2\">\n                        <span class=\"w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0\">\n                          <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2.5\" class=\"w-3 h-3\" viewBox=\"0 0 24 24\">\n                            <path d=\"M20 6L9 17l-5-5\"></path>\n                          </svg>\n                        </span>Vexillologist pitchfork\n                      </p>\n                      <p class=\"flex items-center text-gray-600 mb-2\">\n                        <span class=\"w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0\">\n                          <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2.5\" class=\"w-3 h-3\" viewBox=\"0 0 24 24\">\n                            <path d=\"M20 6L9 17l-5-5\"></path>\n                          </svg>\n                        </span>Tumeric plaid portland\n                      </p>\n                      <p class=\"flex items-center text-gray-600 mb-2\">\n                        <span class=\"w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0\">\n                          <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2.5\" class=\"w-3 h-3\" viewBox=\"0 0 24 24\">\n                            <path d=\"M20 6L9 17l-5-5\"></path>\n                          </svg>\n                        </span>Hexagon neutra unicorn\n                      </p>\n                      <p class=\"flex items-center text-gray-600 mb-6\">\n                        <span class=\"w-4 h-4 mr-2 inline-flex items-center justify-center bg-gray-400 text-white rounded-full flex-shrink-0\">\n                          <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2.5\" class=\"w-3 h-3\" viewBox=\"0 0 24 24\">\n                            <path d=\"M20 6L9 17l-5-5\"></path>\n                          </svg>\n                        </span>Mixtape chillwave tumeric\n                      </p>\n                      <button class=\"flex items-center mt-auto text-white bg-indigo-500 border-0 py-2 px-4 w-full focus:outline-none hover:bg-indigo-600 rounded\">Button\n                        <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" class=\"w-4 h-4 ml-auto\" viewBox=\"0 0 24 24\">\n                          <path d=\"M5 12h14M12 5l7 7-7 7\"></path>\n                        </svg>\n                      </button>\n                      <p class=\"text-xs text-gray-500 mt-3\">Literally you probably haven't heard of them jean shorts.</p>\n                    </div>\n                  </div>\n                </div>\n                  \n\n\n\n\n\n\n                {/* <form class=\"w-full max-w-lg\">\n                  <div class=\"flex flex-wrap -mx-3 mb-6\">\n                    <div class=\"w-full md:w-1/2 px-3 mb-6 md:mb-0\">\n                      <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" for=\"grid-first-name\">\n                        First Name\n                      </label>\n                      <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-red-500 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white\" id=\"grid-first-name\" type=\"text\" placeholder=\"Jane\" />\n                      <p class=\"text-red-500 text-xs italic\">Please fill out this field.</p>\n                    </div>\n                    <div class=\"w-full md:w-1/2 px-3\">\n                      <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" for=\"grid-last-name\">\n                        Last Name\n                      </label>\n                      <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-last-name\" type=\"text\" placeholder=\"Doe\" />\n                    </div>\n                  </div>\n                  <div class=\"flex flex-wrap -mx-3 mb-6\">\n                    <div class=\"w-full px-3\">\n                      <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" for=\"grid-password\">\n                        Password\n                      </label>\n                      <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-password\" type=\"password\" placeholder=\"******************\" />\n                      <p class=\"text-gray-600 text-xs italic\">Make it as long and as crazy as you'd like</p>\n                    </div>\n                  </div>\n                  <div class=\"flex flex-wrap -mx-3 mb-2\">\n                    <div class=\"w-full md:w-1/3 px-3 mb-6 md:mb-0\">\n                      <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" for=\"grid-city\">\n                        City\n                      </label>\n                      <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-city\" type=\"text\" placeholder=\"Albuquerque\" />\n                    </div>\n                    <div class=\"w-full md:w-1/3 px-3 mb-6 md:mb-0\">\n                      <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" for=\"grid-state\">\n                        State\n                      </label>\n                      <div class=\"relative\">\n                        <select class=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-state\">\n                          <option>New Mexico</option>\n                          <option>Missouri</option>\n                          <option>Texas</option>\n                        </select>\n                        <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                          <svg class=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\"/></svg>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"w-full md:w-1/3 px-3 mb-6 md:mb-0\">\n                      <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" for=\"grid-zip\">\n                        Zip\n                      </label>\n                      <input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-zip\" type=\"text\" placeholder=\"90210\" />\n                    </div>\n                  </div>\n                </form> */}\n\n\n\n\n\n\n\n\n\n\n\n\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n            <button type=\"button\" class=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm\">\n              New Trade?\n            </button>\n            <button type=\"button\" class=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DailyTradesModal;","const DayLabels = props => {\n  return (\n    <div className=\"DayLabels day-labels\">\n      <p className=\"day\">Sunday</p>\n      <p className=\"day\">Monday</p>\n      <p className=\"day\">Tuesday</p>\n      <p className=\"day\">Wednesday</p>\n      <p className=\"day\">Thursday</p>\n      <p className=\"day\">Friday</p>\n      <p className=\"day\">Saturday</p>\n    </div>\n  )\n}\n\nexport default DayLabels;","import { getTickersFromTrades, getTotalProfitFromTrades } from \"../utils\";\n\nconst Day = props => {\n  // console.log({ props });\n  const { \n    isVoidDay, month, date, year, trades, isActiveDay, onSelectDay\n  } = props;\n\n  const totalProfit = getTotalProfitFromTrades(trades);\n  const tickers = getTickersFromTrades(trades);\n  const numberOfTrades = (trades || []).length;\n\n  const isTotalProfitNegative = totalProfit.includes('-');\n\n  if (isVoidDay) {\n    return (\n      <div className={`Day ${isVoidDay ? 'void' : ''}`}></div>\n    )\n  }\n\n  return (\n    <div \n      className={`\n        Day p-1 \n        ${!isVoidDay ? 'date' : ''} \n        ${numberOfTrades < 0 ? 'bg-white text-black' : ''} \n        ${numberOfTrades && isTotalProfitNegative ? 'bg-red-800 text-white' : ''} \n        ${numberOfTrades && !isTotalProfitNegative ? 'bg-green-700 text-white' : ''} \n        ${isActiveDay ? 'border-4 border-yellow-500' : ''}\n      `} \n      id={`${month}-${date}-${year}`}\n      onClick={() => onSelectDay({ month, date, year, trades })}\n    >\n      <span class=\"date-label\">{date}</span>\n      {numberOfTrades > 0 \n        ? (\n          <div class=\"daily-stat py-1\">\n          {!!totalProfit ? (\n            <p class=\"profit items-center mb-1\">\n              <span class=\"label text-gray-300 font-light\">P/L</span>\n              <span class=\"text-xs font-bold\">${totalProfit}</span>\n            </p>\n          ) : ''}\n          {!!numberOfTrades ? (\n            <p class=\"number-of-trades mb-1\">\n              <span class=\"label text-gray-300 font-light\">Trades</span>\n              <span class=\"ml-2 font-bold\">{numberOfTrades}</span>\n            </p>\n          ) : ''}\n          {!!tickers ? (\n            <p class=\"tickers border-t border-gray-300 text-gray justify-center\">\n              <span class=\"text-gray-300 font-light\">{tickers}</span>\n            </p>\n          ) : ''}\n        </div>\n        ) \n        : ''\n      }\n    </div>\n  );\n}\n\nexport default Day;\n","import { findMatchingTradesByDate, getDateFromDate, getMonthFromDate, getNumberOfDaysInMonth, getUniqueId, getYearFromDate } from \"../utils\";\nimport Day from \"./Day\";\n\nconst DaysGrid = (props) => {\n  const { \n    activeDate,  \n    activeDateDate,\n    activeMonth,\n    activeYear,\n    activeTradeLogs,\n    todayDate,\n    onSelectDay,\n  } = props;\n  \n  const numberOfDaysInMonth = getNumberOfDaysInMonth(\n    activeDate.getMonth(), \n    activeYear\n  ); // i.e., 28, 30, 31\n  const firstOfMonth = new Date(`${activeMonth} 1, ${activeYear}`);\n  const indexOfFirstDayInMonth = firstOfMonth.getDay(); // i.e., 0-6, Sun - Saturday \n\n  // calculates total number of day blocks to show on calendar (includes \n  // both void days in the beginning of month and the total number of days \n  // in that month). Note: \"void\" days referring to the grey blocked days \n  // in this calendar - https://i.postimg.cc/SxqdHqgN/Screen-Shot-2021-09-25-at-11-28-17-PM.png, as an example\n  const numberOfDaysInGrid = numberOfDaysInMonth + indexOfFirstDayInMonth;\n\n  // console.log({\n  //   numberOfDaysInMonth,\n  //   firstOfMonth,\n  //   indexOfFirstDayInMonth,\n  //   numberOfDaysInGrid,\n  //   daysInGrid\n  // });\n\n  const daysInGrid = [...Array(numberOfDaysInGrid).keys()]\n    // maps over each day, calculates void day and month, date, and year info\n    .map((_, index) => {\n      const isVoidDay = index < indexOfFirstDayInMonth;\n      return {\n        isVoidDay,\n        month: isVoidDay ? null : `${activeMonth}`,\n        date: isVoidDay ? null : `${(index - indexOfFirstDayInMonth) + 1}`,\n        year: isVoidDay ? null : `${activeYear}`,\n      }\n    })\n    // maps over each day and finds potential matching stocks from that day \n    .map((dayGrid) => {\n      const { month, date, year } = dayGrid;\n      const matchingTrades = findMatchingTradesByDate(\n        activeTradeLogs, \n        month, \n        date, \n        year\n      );\n      return { \n        ...dayGrid, \n        trades: matchingTrades || [], \n      };\n    });\n  \n  console.log({\n    numberOfDaysInMonth,\n    firstOfMonth,\n    indexOfFirstDayInMonth,\n    numberOfDaysInGrid,\n    daysInGrid\n  });\n\n  // return null;\n\n  return (\n    <div className=\"DaysGrid month-grid\" id=\"month-grid\">\n      {daysInGrid.map((daysInGrid) => {\n        const { month, date, year, isVoidDay } = daysInGrid;\n        const isActiveDay = (`${getDateFromDate(activeDate)}` === date) \n          && (`${getMonthFromDate(activeDate)}` === month) \n          && (`${getYearFromDate(activeDate)}` === year);\n        return (\n          <Day \n            key={isVoidDay ? `${getUniqueId()}` :`${month}-${date}-${year}`} \n            {...daysInGrid} \n            isActiveDay={isActiveDay}\n            onSelectDay={onSelectDay}\n          />\n        )\n      })}\n    </div>\n  );\n}\n\nexport default DaysGrid;","import DayLabels from \"./DayLabels\";\nimport DaysGrid from \"./DaysGrid\";\n\nconst MonthlyCalendarGrid = (props) => {\n  return (\n    <section className=\"MonthlyCalendarGrid my-2\">\n      <DayLabels />\n      <DaysGrid {...props} />\n    </section>\n  )\n}\n\nexport default MonthlyCalendarGrid;","const MonthlyStats = (props) => {\n  const { gains, losses, profit } = props;\n  const isTotalProfitNegative = profit.includes('-');\n\n  if (!gains || !losses || !profit) return null;\n\n  return (\n    <div className=\"MonthlyStats monthly-stats flex\">\n      <p className=\"gains my-1\">\n        <sub className=\"text-gray-400\">Gains: </sub> \n        <span className=\"text-green-900 title-font sm:text-3xl text-2xl font-medium\"> ${gains} </span>\n      </p>\n      <p className=\"losses text-red-900 my-1 ml-2\">\n        <sub className=\"text-gray-400\">Losses: </sub> \n        <span className=\"text-red-900 title-font sm:text-3xl text-2xl font-medium\"> ${losses} </span>\n      </p>\n      <p className=\"p-l text-gray-900 my-1 ml-2\">\n        <sub className=\"text-gray-400\">P/L: </sub> \n        <span className={`${isTotalProfitNegative ? 'text-red-900' : 'text-green-900'} text-gray-500 title-font sm:text-3xl text-2xl font-medium`}> ${profit} </span> \n      </p>\n    </div>\n  )\n}\n\nexport default MonthlyStats;","import { AiOutlineArrowLeft, AiOutlineArrowRight } from \"react-icons/ai\";\n\nconst MonthNavigator = (props = {}) => {\n  const { \n    prevMonth, \n    nextMonth, \n    onClickOnPrevMonth,\n    onClickOnNextMonth,\n  } = props;\n  \n  if (!prevMonth || !nextMonth) return null;\n\n  return (\n    <div className=\"MonthNavigator flex items-center\">\n      <button type=\"button\" className=\"inline-flex items-center justify-center px-2 py-1 border border-transparent text-base font-small text-white bg-indigo-600 hover:bg-indigo-700\" onClick={onClickOnPrevMonth}>\n        <AiOutlineArrowLeft className=\"mr-1\" /> {prevMonth}\n      </button>\n\n      <button type=\"button\" className=\"inline-flex items-center justify-center px-2 py-1 ml-1 border border-transparent text-base font-small text-white bg-indigo-600 hover:bg-indigo-700\" onClick={onClickOnNextMonth}>\n        {nextMonth} <AiOutlineArrowRight className=\"ml-1\" />\n      </button>\n    </div>\n  );\n};\n\nexport default MonthNavigator;","import React, { Component } from \"react\";\nimport { filterTradesByMonthAndYear, getDateFromDate, getMonthFromDate, getNextMonthFromDate, getPrevMonthFromDate, getStatsFromTrades, getYearFromDate } from \"../utils\";\nimport AddTradeBtn from \"./AddTradeBtn\";\nimport DailyTradesModal from \"./DailyTradesModal\";\nimport MonthlyCalendarGrid from \"./MonthCalendarGrid\";\nimport MonthlyStats from \"./MonthlyStats\";\nimport MonthNavigator from \"./MonthNavigator\";\n\nclass MonthlyCalendar extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      todayDate: new Date(),\n      activeDate: new Date(),\n      // activeDate: new Date(`December 10, 2021`),\n      // activeMonthTradeLogs: [],\n      showActiveDateTradeLogs: true,\n    }\n\n    // this.fetchActiveMonthTradeLogs = this.fetchActiveMonthTradeLogs.bind(this);\n    this.onClickOnPrevMonth = this.onClickOnPrevMonth.bind(this);\n    this.onClickOnNextMonth = this.onClickOnNextMonth.bind(this);\n    this.onAddNewTrade = this.onAddNewTrade.bind(this);\n    this.onSelectDay = this.onSelectDay.bind(this);\n    this.setShowActiveDateTradeLogs = this.setShowActiveDateTradeLogs.bind(this);\n  }\n\n  // getTradesByMonthAndYear = async (props) => {\n  //   const { user, activeDate } = props;\n  //   const { uid } = user || {};\n  //   const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n  //   const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n  \n  //   const fetchedAllTrades = await fetchAllTradesByUserId(uid);\n  //   const filteredTradesByMonthAndYear = filterTradesByMonthAndYear(\n  //     fetchedAllTrades,\n  //     activeMonth,\n  //     activeYear,\n  //   );\n  //   console.log({ fetchedAllTrades, filteredTradesByMonthAndYear });\n  //   props.setState(() => {\n  //     return { tradeLogs: filteredTradesByMonthAndYear }; \n  //   });\n  // }\n\n  // async fetchActiveMonthTradeLogs() {\n  //   const { activeDate, user } = this.state;\n  //   const userId = user?.uid || {};\n\n  //   const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n  //   const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n    \n  //   // const fetchedAllTrades = await fetchAllTradesByUserId(userId);\n  //   // const filteredTradesByMonthAndYear = filterTradesByMonthAndYear(\n  //   //   fetchedAllTrades,\n  //   //   activeMonth,\n  //   //   activeYear,\n  //   // );\n  //   // console.log({ fetchedAllTrades, filteredTradesByMonthAndYear });\n  //   // props.setState(() => {\n  //   //   return { tradeLogs: filteredTradesByMonthAndYear }; \n  //   // });\n  // }\n \n  componentDidMount() {\n    // this.fetchActiveMonthTradeLogs();\n  }\n\n  onClickOnPrevMonth = () => {\n    const { activeDate } = this.state;\n    console.log('click on prev month detected...');\n    const firstOfPrevMonth = getPrevMonthFromDate(activeDate);\n    this.setState({ activeDate: firstOfPrevMonth });\n  }\n\n  onClickOnNextMonth = () => {\n    const { activeDate } = this.state;\n    console.log('click on next month detected...');\n    const firstOfNextMonth = getNextMonthFromDate(activeDate);\n    this.setState({ activeDate: firstOfNextMonth });\n  }\n\n  onAddNewTrade() {\n    console.log('open new trade modal...');\n  }\n\n  setShowActiveDateTradeLogs(status = false) {\n    this.setState({ showActiveDateTradeLogs: status })\n  }\n\n  onSelectDay({ month, date, year }) {\n    this.setState({ activeDate: new Date(`${month} ${date}, ${year}`) });\n    this.setShowActiveDateTradeLogs(true);\n  }\n\n  render() {\n    const { allTradeLogs } = this.props;\n    const { activeDate, showActiveDateTradeLogs } = this.state;\n\n    const activeDateDate = getDateFromDate(activeDate);  // i.e., \"February\"\n    const activeMonth = getMonthFromDate(activeDate);  // i.e., \"February\"\n    const activeYear = getYearFromDate(activeDate).toString();    // i.e., 2020\n    \n    const activeTradeLogs = filterTradesByMonthAndYear(\n      allTradeLogs, \n      activeMonth, \n      activeYear\n    );\n\n    const { gains, losses, profit } = getStatsFromTrades(activeTradeLogs);\n\n    console.log({ activeTradeLogs, gains, losses, profit });\n    \n    return (\n      <article className=\"MonthlyCalendar\">\n        <header className=\"flex py-2 px-2 justify-between items-center flex-wrap\">\n          <MonthNavigator\n            prevMonth={getMonthFromDate(getPrevMonthFromDate(activeDate))}\n            nextMonth={getMonthFromDate(getNextMonthFromDate(activeDate))}\n            onClickOnPrevMonth={this.onClickOnPrevMonth}\n            onClickOnNextMonth={this.onClickOnNextMonth}\n          />\n          <h1 className=\"active-date sm:text-3xl text-2xl font-medium title-font text-gray-900 text-center\"> {activeMonth} {activeDateDate}, {activeYear} </h1>\n          <MonthlyStats\n            gains={gains}\n            losses={losses}\n            profit={profit}\n          />\n        </header>\n        \n        <section>\n          <MonthlyCalendarGrid \n            {...this.state} \n            activeDateDate={activeDateDate}\n            activeMonth={activeMonth}\n            activeYear={activeYear}\n            activeTradeLogs={activeTradeLogs} \n            onSelectDay={this.onSelectDay}\n          />\n        </section>\n\n        <AddTradeBtn onClick={this.onAddNewTrade} />\n\n        {showActiveDateTradeLogs && (\n          <DailyTradesModal\n            activeDate={activeDate} \n            activeTradeLogs={activeTradeLogs} \n          />\n        )}\n\n      </article>\n    )\n  }\n}\n\nexport default MonthlyCalendar;","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArgNoY7luYCUYJlVAxapXEjw2nuDu5Ny8\",\n  authDomain: \"log-trade-dev.firebaseapp.com\",\n  projectId: \"log-trade-dev\",\n  storageBucket: \"log-trade-dev.appspot.com\",\n  messagingSenderId: \"427284527632\",\n  appId: \"1:427284527632:web:9232621b47da1f73dca895\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);","import React, { Component } from 'react';\nimport { AiOutlineArrowLeft, AiOutlineArrowRight } from \"react-icons/ai\";\nimport './App.css';\nimport MonthlyCalendar from './MonthlyCalendar/MonthlyCalendar';\nimport { getUserFromLocalStorage, getTickersFromTrades, getTotalProfitFromTrades } from './utils';\nimport { fetchAllTradesByUserId } from './vendors/firebase/firebase.firestore';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: getUserFromLocalStorage(),\n      allTradeLogs: [],\n    }\n  }\n\n  async componentDidMount() {\n    const { user } = this.state;\n    \n    if (!user || user === null) return;\n\n    const { uid: userId } = user || {};\n\n    // const fetchedTradeLogs = await fetchAllTradesByUserId('H8XTiCvnxOWojohm2DewzlBxrjG2');\n    \n    this.setState({ \n      allTradeLogs: [\n        {\n          closingPrice: \"8.00\",\n          date: \"12\",\n          month: \"October\",\n          notes: \"\",\n          numberOfShares: 2,\n          openingPrice: \"10.00\",\n          stopLoss: \"9.00\",\n          takeProfit: \"15.00\",\n          ticker: \"LOL\",\n          tradeId: \"sd7f7f8d57fd\",\n          year: \"2021\",\n        },\n        {\n          closingPrice: \"15.00\",\n          date: \"14\",\n          month: \"October\",\n          notes: \"\",\n          numberOfShares: 2,\n          openingPrice: \"10.00\",\n          stopLoss: \"9.00\",\n          takeProfit: \"15.00\",\n          ticker: \"GOOGL\",\n          tradeId: \"g76df7dg76fg6\",\n          year: \"2021\",\n        }\n      ],\n      // allTradeLogs: fetchedTradeLogs \n    });\n  }\n\n  render() {\n    console.log({ props: this.props, state: this.state });\n    return (\n      <div className=\"App Dashboard\">\n        <MonthlyCalendar {...this.props} {...this.state} />\n      </div>\n    ); \n  }\n}\n\nexport default App;\n\n\n\n\n// const Day = (props) => {\n//   const { \n//     isVoidDay = false, \n//     month = 'October', \n//     date = '10', \n//     year = '2021', \n//     trades = [], \n//     isActiveDay = false,\n//   } = props;\n\n//   const totalProfit = getTotalProfitFromTrades(trades);\n//   const tickers = getTickersFromTrades(trades);\n//   const numberOfTrades = trades?.length || 0;\n//   const isTotalProfitNegative = totalProfit < 0;\n\n//   console.log({ date, totalProfit, tickers, numberOfTrades });\n\n//   if (isVoidDay) {\n//     return (\n//       <div className={`Day ${isVoidDay ? 'void' : ''}`}></div>\n//     );\n//   }\n\n//   return (\n//     <div \n//       className={`\n//         Day p-1 \n//         ${!isVoidDay ? 'date' : ''} \n//         ${numberOfTrades < 0 ? 'bg-light text-black' : ''} \n//         ${numberOfTrades && isTotalProfitNegative ? 'bg-danger text-white' : ''} \n//         ${numberOfTrades && !isTotalProfitNegative \n//           ? 'bg-success text-white' : ''} \n//         ${isActiveDay ? 'border border-warning border-4' : ''}\n//       `} \n//       id={`${month}-${date}-${year}`}\n//     >\n\n//       <span className=\"date-label\">{date}</span>\n\n//       {numberOfTrades > 0 \n//         ? (\n//           <div className=\"daily-stat p-2\">\n//             {!!totalProfit ? (\n//               <p className=\"profit mt-1 mb-1 border-bottom border-light\">\n//                 <span className=\"label\">Profit</span>\n//                 <span className=\"value\">{totalProfit}</span>\n//               </p>\n//             ) : ''}\n//             {!!numberOfTrades ? (\n//               <p className=\"number-of-trades mt-1 mb-1 border-bottom border-light\">\n//                 <span className=\"label\"># Trades</span>\n//                 <span className=\"value\">{numberOfTrades}</span>\n//               </p>\n//             ) : null}\n//             {!!tickers ? (\n//               <p className=\"tickers mt-1 mb-1\">\n//                 <span className=\"value\">{tickers}</span>\n//               </p>\n//             ) : null}\n//           </div>\n//         ) : null\n//       }\n//     </div>\n//   );\n// };\n\n","import './firebase';\nimport { getFirestore, doc, getDoc, setDoc, updateDoc, arrayUnion } from \"firebase/firestore\"\n// import { getDocFromCache, saveDocInCache } from \"./firebase.cache\";\n\nconst db = getFirestore();\n\n// const fakeDB = {\n//   trades: [\n//     {\n//       closingPrice: \"11.50\",\n//       date: \"1\",\n//       month: \"October\",\n//       name: \"Cellect Biotechnology\",\n//       notes: \"Awesome win today!\",\n//       numberOfShares: 2,\n//       openingPrice: \"10.50\",\n//       stopLoss: \"9.00\",\n//       takeProfit: \"12.00\",\n//       ticker: \"APOPA\",\n//       tradeType: \"long\",\n//       year: \"2021\",\n//       tradeId: 'xwtr34535',\n//     },\n//     {\n//       closingPrice: \"15.00\",\n//       date: \"2\",\n//       month: \"October\",\n//       name: \"Atlantic American\",\n//       notes: \"Nice!\",\n//       numberOfShares: 3,\n//       openingPrice: \"10.00\",\n//       stopLoss: \"9.00\",\n//       takeProfit: \"20.00\",\n//       ticker: \"AAME\",\n//       year: \"2021\",\n//       tradeId: '74t6e657',\n//     },\n//     {\n//       closingPrice: \"43543543.00\",\n//       date: \"8\",\n//       month: \"October\",\n//       name: \"Aeglea Biotherapeutics\",\n//       notes: \"3453455\",\n//       numberOfShares: 3,\n//       openingPrice: \"4353.00\",\n//       stopLoss: \"54543.00\",\n//       takeProfit: \"4534.00\",\n//       ticker: \"AGLE\",\n//       year: \"2021\",\n//       tradeId: 'xn73i434x',\n//     },\n//     {\n//       closingPrice: \"15.00\",\n//       date: \"2\",\n//       month: \"October\",\n//       name: \"Tesla\",\n//       notes: \"Cool!\",\n//       numberOfShares: 10,\n//       openingPrice: \"17.00\",\n//       stopLoss: \"7.00\",\n//       takeProfit: \"18.00\",\n//       ticker: \"TSLA\",\n//       year: \"2021\",\n//       tradeId: 'x4w56wx54',\n//     }\n//   ],\n//   userId: '51XeDcMHQzYfB3clHKZZnnp87uq2',\n// }\n\n// export const fetchAllTradesByUserId = async (userId) => {\n//   if (!userId || typeof userId !== 'string') {\n//     throw new Error('Please pass in a user id to get stocks');\n//   }\n\n//   // fake API data\n//   const userTrades = {\n//     exists: () => true,\n//     data: () => (fakeDB)\n//   };\n\n//   // const userTrades = await getDoc(doc(db, \"tradelogs\", userId));\n\n//   if (userTrades?.exists()) {\n//     return userTrades?.data()?.trades;\n//   } \n//   return [];\n// } \n\n// export const createNewTradeLog = async (newTrade, userId) => {\n//   const tradelogRef = doc(db, \"tradelogs\", userId)\n//   const tradelogSnap = await getDoc(tradelogRef) ;\n\n//   if (tradelogSnap.exists()) {\n//     // update existing document by adding new trade to trades list\n//     try {\n//       await updateDoc(tradelogRef, {\n//         trades: arrayUnion({ ...newTrade }),\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   } else {\n//     // set up a new document and add new trade to trades list\n//     try {\n//       await setDoc(doc(db, \"tradelogs\", userId), {\n//         trades: [{ ...newTrade }],\n//         userId,\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   }\n// }\n\n// tradelogs stringified\n\nexport const stringify = json => {\n  const isJSONObject = typeof json === 'object' && json !== null;\n  if (!isJSONObject) {\n    throw new Error('Please pass in a valid JSON object to stringify');\n  }\n  return JSON.stringify(json);\n}\n\nexport const jsonify = stringified => {\n  if (!stringified \n    || !stringified.length \n    || typeof stringified !== 'string'\n  ) {\n    throw new Error('Please pass in a valid stringified JSON to parse');\n  }\n  try {\n    const jsonified = JSON.parse(stringified);\n    return jsonified;\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\n// const getUserDoc = async (\n//   userId, \n//   options = { \n//     useCache: false, \n//     cacheDurationInMinutes: 1,\n//   },\n// ) => {\n//   // flags\n//   const useCache = options.useCache || false;\n//   const cacheDurationInMinutes = options.cacheDurationInMinutes || 1;\n\n//   console.log({ ...options });\n//   if (!userId || typeof userId !== 'string') {\n//     throw new Error('Please pass in a user id to get document');\n//   }\n\n//   const getUserDocFromFirestore = async (userId) => {\n//     const userDoc = await getDoc(doc(db, \"tradelogs-stringified\", userId));\n//     return { \n//       exists: userDoc?.exists(),\n//       data: userDoc?.data(),\n//     };\n//   }\n\n//   const getUserDocFromCache = async (userId) => {\n//     const { exists, data, expiration } = await getDocFromCache(userId);\n//     return { \n//       exists, \n//       data, \n//       expiration \n//     }; \n//   }\n\n//   if (!useCache) {\n//     console.log(\n//       `useCache [${useCache}]... getting user doc from firebase DB`\n//     );\n//     const { exists, data } = await getUserDocFromFirestore(userId); \n//     if (exists) {\n//       saveDocInCache(\n//         userId, \n//         stringify(data), \n//         cacheDurationInMinutes\n//       );\n//     }\n//     return { exists, data };\n//   }\n  \n//   if (useCache) {\n//     const { exists, data, expiration } = await getUserDocFromCache(userId);\n//     const isCacheExpired = expiration !== null && new Date().getTime() > expiration;\n\n//     console.log({ exists, data, expiration, isCacheExpired, currentTime: new Date().getTime() });\n\n//     if (!exists || isCacheExpired) {\n//       console.log(\n//         `useCache [${useCache}], but cache either doesn't have doc OR is expired... getting user doc from firebase DB`\n//       );\n//       const { exists, data } = await getUserDocFromFirestore(userId); \n//       if (exists) {\n//         saveDocInCache(\n//           userId, \n//           stringify(data), \n//           cacheDurationInMinutes\n//         );\n//       }\n//       return { exists, data };\n//     }\n\n//     console.log(\n//       `useCache [${useCache}]... getting user doc from cache`\n//     );\n//     return { exists, data };\n//   }\n// }\n\n// export const fetchAllTradesByUserId = async (\n//   userId, \n//   options = { useCache: true, cacheDurationInMinutes: 0.15 },\n// ) => {\n//   if (!userId || typeof userId !== 'string') {\n//     throw new Error('Please pass in a user id to get stocks');\n//   }\n\n//   // fake API data\n//   // const userTrades = {\n//   //   exists: () => true,\n//   //   data: () => (fakeDB)\n//   // };\n\n//   const { exists, data } = await getUserDoc(userId, options);\n\n//   if (!exists) {\n//     console.info(`No document found for user [${userId}]`);\n//     return [];\n//   };\n\n//   // const data = userDoc?.data();\n//   console.log({ data });\n//   // saveDocInCache(userId, data);\n//   const content = jsonify(data?.content || '');\n//   const trades = content?.trades;\n//   console.log({ trades });\n//   return trades;\n\n//   // check cache for existing doc\n//   // const userDocCache = getDocFromCache(userId);\n//   // if cache, serve from there\n//   // if (userDocCache !== null) {\n//   //   console.log('serving user doc from cache...');\n//   //   const content = jsonify(userDocCache.content || '');\n//   //   const trades = content?.trades;\n//   //   console.log({ trades });\n//   //   return trades;\n//   // } else {\n//   //   console.log('serving user doc from DB...');\n//   //   // else get from DB\n//   //   // save fetched doc from DB in cache for later ref\n//   //   const userDoc = await getDoc(doc(db, \"tradelogs-stringified\", userId));\n\n//   //   if (!userDoc?.exists()) return [];\n\n//   //   const data = userDoc?.data();\n//   //   saveDocInCache(userId, data);\n//   //   const content = jsonify(data?.content || '');\n//   //   const trades = content?.trades;\n//   //   console.log({ trades });\n//   //   return trades;\n//   // }\n// } \n\n// export const createNewTradeLog = async (newTrade, userId) => {\n//   const tradelogRef = doc(db, \"tradelogs-stringified\", userId)\n//   const tradelogSnap = await getDoc(tradelogRef) ;\n\n//   if (tradelogSnap.exists()) {\n//     // update existing document by adding new trade to trades list\n//     try {\n//       await updateDoc(tradelogRef, {\n//         trades: arrayUnion({ ...newTrade }),\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   } else {\n//     // set up a new document and add new trade to trades list\n//     try {\n//       await setDoc(doc(db, \"tradelogs\", userId), {\n//         trades: [{ ...newTrade }],\n//         userId,\n//       });\n//       return { isNewTradeCreated: true };\n//     } catch (error) {\n//       return { \n//         error: (error && error.message) || \n//           'Unable to create new trade at the moment. Try again later.' \n//       }\n//     }\n//   }\n// }\n\nconst getTradeLogsDocById = async (docId) => {\n  if (!docId || typeof docId !== 'string') {\n    throw new Error(\n      'Please pass in a valid doc id to fetch document from Firestore'\n    );\n  }\n  return await getDoc(doc(db, \"tradelogs-stringified\", docId));\n}\n\nexport const fetchAllTradesByUserId = async (userId) => {\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to get trade logs');\n  }\n\n  const userTradeLogsDoc = await getTradeLogsDocById(userId);\n\n  if (!userTradeLogsDoc?.exists()) {\n    console.info(\n      `No trade logs found for user id - [${userId}]. Returning empty array set`\n    );\n    return [];\n  } \n\n  const userTrades = \n    jsonify(userTradeLogsDoc?.data()?.content || {}).trades || [];\n\n  console.log({ userTrades });\n\n  return userTrades;\n} \n\nexport const createNewTradeLog = async (newTrade, userId) => {\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to create a new trade log');\n  }\n\n  const validateNewTrade = (newTrade) => {\n    if (!newTrade || typeof newTrade !== 'object') {\n      throw new Error('Please pass in a valid new trade object');\n    }\n    const requiredProperties = [\n      'tradeId',\n      'openingPrice',\n      'closingPrice',\n      'stopLoss',\n      'takeProfit',\n      'date',\n      'month',\n      'year',\n      'notes',\n      'numberOfShares',\n      'ticker',\n    ]\n    const missingProperty = requiredProperties.find(property => {\n      return !newTrade.hasOwnProperty(property)\n    });\n\n    if (missingProperty) {\n      return { \n        isValid: false, \n        error: `[${missingProperty}] property is required to create a new trade` \n      }\n    }\n    return { isValid: true, error: null };\n  }\n\n  const { isValid, error } = validateNewTrade(newTrade);\n\n  if (!isValid) {\n    throw new Error(error);\n  }\n\n  const userTradeLogsRef = doc(db, \"tradelogs-stringified\", userId)\n  const userTradeLogsSnap = await getDoc(userTradeLogsRef) ;\n\n  if (userTradeLogsSnap.exists()) {\n    // update existing document by adding new trade to trades list\n    const { content } = userTradeLogsSnap.data() || {};\n    const existingData = jsonify(content);\n    const { userId, trades = [] } = existingData;\n    const newData = {\n      trades: [\n        ...trades,\n        { ...newTrade },\n      ],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await updateDoc(userTradeLogsRef, {\n        content: newDataStringified,\n      });\n      return { isNewTradeLogCreated: true };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to create new trade at the moment. Try again later.' \n      }\n    }\n  } else {\n    // set up a new document and add new trade to trades list\n    const newData = {\n      trades: [{ ...newTrade }],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await setDoc(doc(db, \"tradelogs-stringified\", userId), {\n        content: newDataStringified,\n      });\n      return { isNewTradeCreated: true };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to create new trade at the moment. Try again later.' \n      }\n    }\n  }\n}\n\nexport const deleteTradeLog = async (tradeLogId, userId) => {\n  if (!tradeLogId || typeof tradeLogId !== 'string') {\n    throw new Error('Please pass in a valid trade log id to delete');\n  }\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to delete a trade log');\n  }\n\n  const userTradeLogsRef = doc(db, \"tradelogs-stringified\", userId)\n  const userTradeLogsSnap = await getDoc(userTradeLogsRef);\n\n  if (userTradeLogsSnap.exists()) {\n    // update existing trade logs list by removing matching trade id\n    const { content } = userTradeLogsSnap.data() || {};\n    const existingData = jsonify(content);\n    const { userId, trades = [] } = existingData;\n    const filteredTrades = trades.filter(trade => trade.tradeId !== tradeLogId);\n    const newData = {\n      trades: [...filteredTrades],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await updateDoc(userTradeLogsRef, {\n        content: newDataStringified,\n      });\n      return { isTradeLogDeleted: true, deletedTradeLogId: tradeLogId };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to delete trade log at the moment. Try again later.' \n      }\n    }\n  }\n}\n\nexport const updateTradeLog = async (tradeLogId, updatedTradeLog, userId) => {\n  if (!tradeLogId || typeof tradeLogId !== 'string') {\n    throw new Error('Please pass in a valid trade log id to delete');\n  }\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('Please pass in a valid user id to delete a trade log');\n  }\n\n  \n  const validateNewTrade = (updatedTrade) => {\n    if (!updatedTrade || typeof updatedTrade !== 'object') {\n      throw new Error('Please pass in a valid updated trade object');\n    }\n    const requiredProperties = [\n      'tradeId',\n      'openingPrice',\n      'closingPrice',\n      'stopLoss',\n      'takeProfit',\n      'date',\n      'month',\n      'year',\n      'notes',\n      'numberOfShares',\n      'ticker',\n    ]\n    const missingProperty = requiredProperties.find(property => {\n      return !updatedTrade.hasOwnProperty(property)\n    });\n\n    if (missingProperty) {\n      return { \n        isValid: false, \n        error: `[${missingProperty}] property is required to update a trade` \n      }\n    }\n    return { isValid: true, error: null };\n  }\n\n  const { isValid, error } = validateNewTrade(updatedTradeLog);\n\n  if (!isValid) {\n    throw new Error(error);\n  }\n\n  const userTradeLogsRef = doc(db, \"tradelogs-stringified\", userId)\n  const userTradeLogsSnap = await getDoc(userTradeLogsRef);\n\n  if (userTradeLogsSnap.exists()) {\n    // update existing trade logs list by removing matching trade id\n    const { content } = userTradeLogsSnap.data() || {};\n    const existingData = jsonify(content);\n    const { userId, trades = [] } = existingData;\n    const updatedTrades = trades.map((trade) => {\n      if (trade.tradeId === tradeLogId) {\n        return { ...updatedTradeLog };\n      }\n      return trade;\n    });\n    const newData = {\n      trades: [...updatedTrades],\n      userId,\n    }\n    const newDataStringified = stringify(newData);\n    try {\n      await updateDoc(userTradeLogsRef, {\n        content: newDataStringified,\n      });\n      return { isTradeLogUpdated: true, updatedTradeLogId: tradeLogId };\n    } catch (error) {\n      return { \n        error: (error && error.message) || \n          'Unable to delete trade log at the moment. Try again later.' \n      }\n    }\n  }\n}\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createNewTradeLog, deleteTradeLog, fetchAllTradesByUserId, updateTradeLog } from './vendors/firebase/firebase.firestore';\n// import reportWebVitals from './reportWebVitals';\n\n// const userId = 'H8XTiCvnxOWojohm2DewzlBxrjG2';\n// const newTradeLog = {\n//   tradeId: 'sd7f7f8d57fd',\n//   closingPrice: '15.00',\n//   openingPrice: '10.00',\n//   stopLoss: '9.00',\n//   takeProfit: '15.00',\n//   date: '13',\n//   month: 'October',\n//   year: '2021',\n//   notes: '',\n//   numberOfShares: 2,\n//   ticker: 'GOOGL',\n// };\n// const updatedTradeLog = {\n//   tradeId: 'sd7f7f8d57fd',\n//   closingPrice: '15.00',\n//   openingPrice: '10.00',\n//   stopLoss: '9.00',\n//   takeProfit: '15.00',\n//   date: '13',\n//   month: 'October',\n//   year: '2021',\n//   notes: '',\n//   numberOfShares: 2,\n//   ticker: 'LOL',\n// };\n// const tradeLogId = 'sd7f7f8d57fd';\n\n\n// fetchAllTradesByUserId('H8XTiCvnxOWojohm2DewzlBxrjG2');\n// createNewTradeLog(newTradeLog, userId);\n// deleteTradeLog(tradeLogId, userId);\n// updateTradeLog(tradeLogId, updatedTradeLog, userId);\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}